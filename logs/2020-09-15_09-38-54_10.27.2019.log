RT is False
Default write of storage_offers_DA.csv just to have a file (but constraint should be inactive)
Reading model...
...model read.
creating competitive generators file...
...competitive generators recorded.
Loading data...
.. day-ahead data with real-time VRE data read.
Compiling instance...
175*transmissionmax_dual[1,C1] + 175*transmissionmax_dual[2,C1] + 175*transmissionmax_dual[3,C1] + 175*transmissionmax_dual[4,C1] + 175*transmissionmax_dual[5,C1] + 175*transmissionmax_dual[6,C1] + 175*transmissionmax_dual[7,C1] + 175*transmissionmax_dual[8,C1] + 175*transmissionmax_dual[9,C1] + 175*transmissionmax_dual[10,C1] + 175*transmissionmax_dual[11,C1] + 175*transmissionmax_dual[12,C1] + 175*transmissionmax_dual[13,C1] + 175*transmissionmax_dual[14,C1] + 175*transmissionmax_dual[15,C1] + 175*transmissionmax_dual[16,C1] + 175*transmissionmax_dual[17,C1] + 175*transmissionmax_dual[18,C1] + 175*transmissionmax_dual[19,C1] + 175*transmissionmax_dual[20,C1] + 175*transmissionmax_dual[21,C1] + 175*transmissionmax_dual[22,C1] + 175*transmissionmax_dual[23,C1] + 175*transmissionmax_dual[24,C1] + 175*transmissionmax_dual[1,C2] + 175*transmissionmax_dual[2,C2] + 175*transmissionmax_dual[3,C2] + 175*transmissionmax_dual[4,C2] + 175*transmissionmax_dual[5,C2] + 175*transmissionmax_dual[6,C2] + 175*transmissionmax_dual[7,C2] + 175*transmissionmax_dual[8,C2] + 175*transmissionmax_dual[9,C2] + 175*transmissionmax_dual[10,C2] + 175*transmissionmax_dual[11,C2] + 175*transmissionmax_dual[12,C2] + 175*transmissionmax_dual[13,C2] + 175*transmissionmax_dual[14,C2] + 175*transmissionmax_dual[15,C2] + 175*transmissionmax_dual[16,C2] + 175*transmissionmax_dual[17,C2] + 175*transmissionmax_dual[18,C2] + 175*transmissionmax_dual[19,C2] + 175*transmissionmax_dual[20,C2] + 175*transmissionmax_dual[21,C2] + 175*transmissionmax_dual[22,C2] + 175*transmissionmax_dual[23,C2] + 175*transmissionmax_dual[24,C2] + 175*transmissionmax_dual[1,C3] + 175*transmissionmax_dual[2,C3] + 175*transmissionmax_dual[3,C3] + 175*transmissionmax_dual[4,C3] + 175*transmissionmax_dual[5,C3] + 175*transmissionmax_dual[6,C3] + 175*transmissionmax_dual[7,C3] + 175*transmissionmax_dual[8,C3] + 175*transmissionmax_dual[9,C3] + 175*transmissionmax_dual[10,C3] + 175*transmissionmax_dual[11,C3] + 175*transmissionmax_dual[12,C3] + 175*transmissionmax_dual[13,C3] + 175*transmissionmax_dual[14,C3] + 175*transmissionmax_dual[15,C3] + 175*transmissionmax_dual[16,C3] + 175*transmissionmax_dual[17,C3] + 175*transmissionmax_dual[18,C3] + 175*transmissionmax_dual[19,C3] + 175*transmissionmax_dual[20,C3] + 175*transmissionmax_dual[21,C3] + 175*transmissionmax_dual[22,C3] + 175*transmissionmax_dual[23,C3] + 175*transmissionmax_dual[24,C3] + 175*transmissionmax_dual[1,C4] + 175*transmissionmax_dual[2,C4] + 175*transmissionmax_dual[3,C4] + 175*transmissionmax_dual[4,C4] + 175*transmissionmax_dual[5,C4] + 175*transmissionmax_dual[6,C4] + 175*transmissionmax_dual[7,C4] + 175*transmissionmax_dual[8,C4] + 175*transmissionmax_dual[9,C4] + 175*transmissionmax_dual[10,C4] + 175*transmissionmax_dual[11,C4] + 175*transmissionmax_dual[12,C4] + 175*transmissionmax_dual[13,C4] + 175*transmissionmax_dual[14,C4] + 175*transmissionmax_dual[15,C4] + 175*transmissionmax_dual[16,C4] + 175*transmissionmax_dual[17,C4] + 175*transmissionmax_dual[18,C4] + 175*transmissionmax_dual[19,C4] + 175*transmissionmax_dual[20,C4] + 175*transmissionmax_dual[21,C4] + 175*transmissionmax_dual[22,C4] + 175*transmissionmax_dual[23,C4] + 175*transmissionmax_dual[24,C4] + 175*transmissionmax_dual[1,C5] + 175*transmissionmax_dual[2,C5] + 175*transmissionmax_dual[3,C5] + 175*transmissionmax_dual[4,C5] + 175*transmissionmax_dual[5,C5] + 175*transmissionmax_dual[6,C5] + 175*transmissionmax_dual[7,C5] + 175*transmissionmax_dual[8,C5] + 175*transmissionmax_dual[9,C5] + 175*transmissionmax_dual[10,C5] + 175*transmissionmax_dual[11,C5] + 175*transmissionmax_dual[12,C5] + 175*transmissionmax_dual[13,C5] + 175*transmissionmax_dual[14,C5] + 175*transmissionmax_dual[15,C5] + 175*transmissionmax_dual[16,C5] + 175*transmissionmax_dual[17,C5] + 175*transmissionmax_dual[18,C5] + 175*transmissionmax_dual[19,C5] + 175*transmissionmax_dual[20,C5] + 175*transmissionmax_dual[21,C5] + 175*transmissionmax_dual[22,C5] + 175*transmissionmax_dual[23,C5] + 175*transmissionmax_dual[24,C5] + 175*transmissionmax_dual[1,C6] + 175*transmissionmax_dual[2,C6] + 175*transmissionmax_dual[3,C6] + 175*transmissionmax_dual[4,C6] + 175*transmissionmax_dual[5,C6] + 175*transmissionmax_dual[6,C6] + 175*transmissionmax_dual[7,C6] + 175*transmissionmax_dual[8,C6] + 175*transmissionmax_dual[9,C6] + 175*transmissionmax_dual[10,C6] + 175*transmissionmax_dual[11,C6] + 175*transmissionmax_dual[12,C6] + 175*transmissionmax_dual[13,C6] + 175*transmissionmax_dual[14,C6] + 175*transmissionmax_dual[15,C6] + 175*transmissionmax_dual[16,C6] + 175*transmissionmax_dual[17,C6] + 175*transmissionmax_dual[18,C6] + 175*transmissionmax_dual[19,C6] + 175*transmissionmax_dual[20,C6] + 175*transmissionmax_dual[21,C6] + 175*transmissionmax_dual[22,C6] + 175*transmissionmax_dual[23,C6] + 175*transmissionmax_dual[24,C6] + 400*transmissionmax_dual[1,C7] + 400*transmissionmax_dual[2,C7] + 400*transmissionmax_dual[3,C7] + 400*transmissionmax_dual[4,C7] + 400*transmissionmax_dual[5,C7] + 400*transmissionmax_dual[6,C7] + 400*transmissionmax_dual[7,C7] + 400*transmissionmax_dual[8,C7] + 400*transmissionmax_dual[9,C7] + 400*transmissionmax_dual[10,C7] + 400*transmissionmax_dual[11,C7] + 400*transmissionmax_dual[12,C7] + 400*transmissionmax_dual[13,C7] + 400*transmissionmax_dual[14,C7] + 400*transmissionmax_dual[15,C7] + 400*transmissionmax_dual[16,C7] + 400*transmissionmax_dual[17,C7] + 400*transmissionmax_dual[18,C7] + 400*transmissionmax_dual[19,C7] + 400*transmissionmax_dual[20,C7] + 400*transmissionmax_dual[21,C7] + 400*transmissionmax_dual[22,C7] + 400*transmissionmax_dual[23,C7] + 400*transmissionmax_dual[24,C7] + 175*transmissionmax_dual[1,C8] + 175*transmissionmax_dual[2,C8] + 175*transmissionmax_dual[3,C8] + 175*transmissionmax_dual[4,C8] + 175*transmissionmax_dual[5,C8] + 175*transmissionmax_dual[6,C8] + 175*transmissionmax_dual[7,C8] + 175*transmissionmax_dual[8,C8] + 175*transmissionmax_dual[9,C8] + 175*transmissionmax_dual[10,C8] + 175*transmissionmax_dual[11,C8] + 175*transmissionmax_dual[12,C8] + 175*transmissionmax_dual[13,C8] + 175*transmissionmax_dual[14,C8] + 175*transmissionmax_dual[15,C8] + 175*transmissionmax_dual[16,C8] + 175*transmissionmax_dual[17,C8] + 175*transmissionmax_dual[18,C8] + 175*transmissionmax_dual[19,C8] + 175*transmissionmax_dual[20,C8] + 175*transmissionmax_dual[21,C8] + 175*transmissionmax_dual[22,C8] + 175*transmissionmax_dual[23,C8] + 175*transmissionmax_dual[24,C8] + 175*transmissionmax_dual[1,C9] + 175*transmissionmax_dual[2,C9] + 175*transmissionmax_dual[3,C9] + 175*transmissionmax_dual[4,C9] + 175*transmissionmax_dual[5,C9] + 175*transmissionmax_dual[6,C9] + 175*transmissionmax_dual[7,C9] + 175*transmissionmax_dual[8,C9] + 175*transmissionmax_dual[9,C9] + 175*transmissionmax_dual[10,C9] + 175*transmissionmax_dual[11,C9] + 175*transmissionmax_dual[12,C9] + 175*transmissionmax_dual[13,C9] + 175*transmissionmax_dual[14,C9] + 175*transmissionmax_dual[15,C9] + 175*transmissionmax_dual[16,C9] + 175*transmissionmax_dual[17,C9] + 175*transmissionmax_dual[18,C9] + 175*transmissionmax_dual[19,C9] + 175*transmissionmax_dual[20,C9] + 175*transmissionmax_dual[21,C9] + 175*transmissionmax_dual[22,C9] + 175*transmissionmax_dual[23,C9] + 175*transmissionmax_dual[24,C9] + 175*transmissionmax_dual[1,C10] + 175*transmissionmax_dual[2,C10] + 175*transmissionmax_dual[3,C10] + 175*transmissionmax_dual[4,C10] + 175*transmissionmax_dual[5,C10] + 175*transmissionmax_dual[6,C10] + 175*transmissionmax_dual[7,C10] + 175*transmissionmax_dual[8,C10] + 175*transmissionmax_dual[9,C10] + 175*transmissionmax_dual[10,C10] + 175*transmissionmax_dual[11,C10] + 175*transmissionmax_dual[12,C10] + 175*transmissionmax_dual[13,C10] + 175*transmissionmax_dual[14,C10] + 175*transmissionmax_dual[15,C10] + 175*transmissionmax_dual[16,C10] + 175*transmissionmax_dual[17,C10] + 175*transmissionmax_dual[18,C10] + 175*transmissionmax_dual[19,C10] + 175*transmissionmax_dual[20,C10] + 175*transmissionmax_dual[21,C10] + 175*transmissionmax_dual[22,C10] + 175*transmissionmax_dual[23,C10] + 175*transmissionmax_dual[24,C10] + 175*transmissionmax_dual[1,C11] + 175*transmissionmax_dual[2,C11] + 175*transmissionmax_dual[3,C11] + 175*transmissionmax_dual[4,C11] + 175*transmissionmax_dual[5,C11] + 175*transmissionmax_dual[6,C11] + 175*transmissionmax_dual[7,C11] + 175*transmissionmax_dual[8,C11] + 175*transmissionmax_dual[9,C11] + 175*transmissionmax_dual[10,C11] + 175*transmissionmax_dual[11,C11] + 175*transmissionmax_dual[12,C11] + 175*transmissionmax_dual[13,C11] + 175*transmissionmax_dual[14,C11] + 175*transmissionmax_dual[15,C11] + 175*transmissionmax_dual[16,C11] + 175*transmissionmax_dual[17,C11] + 175*transmissionmax_dual[18,C11] + 175*transmissionmax_dual[19,C11] + 175*transmissionmax_dual[20,C11] + 175*transmissionmax_dual[21,C11] + 175*transmissionmax_dual[22,C11] + 175*transmissionmax_dual[23,C11] + 175*transmissionmax_dual[24,C11] + 175*transmissionmax_dual[1,C12-1] + 175*transmissionmax_dual[2,C12-1] + 175*transmissionmax_dual[3,C12-1] + 175*transmissionmax_dual[4,C12-1] + 175*transmissionmax_dual[5,C12-1] + 175*transmissionmax_dual[6,C12-1] + 175*transmissionmax_dual[7,C12-1] + 175*transmissionmax_dual[8,C12-1] + 175*transmissionmax_dual[9,C12-1] + 175*transmissionmax_dual[10,C12-1] + 175*transmissionmax_dual[11,C12-1] + 175*transmissionmax_dual[12,C12-1] + 175*transmissionmax_dual[13,C12-1] + 175*transmissionmax_dual[14,C12-1] + 175*transmissionmax_dual[15,C12-1] + 175*transmissionmax_dual[16,C12-1] + 175*transmissionmax_dual[17,C12-1] + 175*transmissionmax_dual[18,C12-1] + 175*transmissionmax_dual[19,C12-1] + 175*transmissionmax_dual[20,C12-1] + 175*transmissionmax_dual[21,C12-1] + 175*transmissionmax_dual[22,C12-1] + 175*transmissionmax_dual[23,C12-1] + 175*transmissionmax_dual[24,C12-1] + 175*transmissionmax_dual[1,C13-2] + 175*transmissionmax_dual[2,C13-2] + 175*transmissionmax_dual[3,C13-2] + 175*transmissionmax_dual[4,C13-2] + 175*transmissionmax_dual[5,C13-2] + 175*transmissionmax_dual[6,C13-2] + 175*transmissionmax_dual[7,C13-2] + 175*transmissionmax_dual[8,C13-2] + 175*transmissionmax_dual[9,C13-2] + 175*transmissionmax_dual[10,C13-2] + 175*transmissionmax_dual[11,C13-2] + 175*transmissionmax_dual[12,C13-2] + 175*transmissionmax_dual[13,C13-2] + 175*transmissionmax_dual[14,C13-2] + 175*transmissionmax_dual[15,C13-2] + 175*transmissionmax_dual[16,C13-2] + 175*transmissionmax_dual[17,C13-2] + 175*transmissionmax_dual[18,C13-2] + 175*transmissionmax_dual[19,C13-2] + 175*transmissionmax_dual[20,C13-2] + 175*transmissionmax_dual[21,C13-2] + 175*transmissionmax_dual[22,C13-2] + 175*transmissionmax_dual[23,C13-2] + 175*transmissionmax_dual[24,C13-2] + 400*transmissionmax_dual[1,C14] + 400*transmissionmax_dual[2,C14] + 400*transmissionmax_dual[3,C14] + 400*transmissionmax_dual[4,C14] + 400*transmissionmax_dual[5,C14] + 400*transmissionmax_dual[6,C14] + 400*transmissionmax_dual[7,C14] + 400*transmissionmax_dual[8,C14] + 400*transmissionmax_dual[9,C14] + 400*transmissionmax_dual[10,C14] + 400*transmissionmax_dual[11,C14] + 400*transmissionmax_dual[12,C14] + 400*transmissionmax_dual[13,C14] + 400*transmissionmax_dual[14,C14] + 400*transmissionmax_dual[15,C14] + 400*transmissionmax_dual[16,C14] + 400*transmissionmax_dual[17,C14] + 400*transmissionmax_dual[18,C14] + 400*transmissionmax_dual[19,C14] + 400*transmissionmax_dual[20,C14] + 400*transmissionmax_dual[21,C14] + 400*transmissionmax_dual[22,C14] + 400*transmissionmax_dual[23,C14] + 400*transmissionmax_dual[24,C14] + 400*transmissionmax_dual[1,C15] + 400*transmissionmax_dual[2,C15] + 400*transmissionmax_dual[3,C15] + 400*transmissionmax_dual[4,C15] + 400*transmissionmax_dual[5,C15] + 400*transmissionmax_dual[6,C15] + 400*transmissionmax_dual[7,C15] + 400*transmissionmax_dual[8,C15] + 400*transmissionmax_dual[9,C15] + 400*transmissionmax_dual[10,C15] + 400*transmissionmax_dual[11,C15] + 400*transmissionmax_dual[12,C15] + 400*transmissionmax_dual[13,C15] + 400*transmissionmax_dual[14,C15] + 400*transmissionmax_dual[15,C15] + 400*transmissionmax_dual[16,C15] + 400*transmissionmax_dual[17,C15] + 400*transmissionmax_dual[18,C15] + 400*transmissionmax_dual[19,C15] + 400*transmissionmax_dual[20,C15] + 400*transmissionmax_dual[21,C15] + 400*transmissionmax_dual[22,C15] + 400*transmissionmax_dual[23,C15] + 400*transmissionmax_dual[24,C15] + 400*transmissionmax_dual[1,C16] + 400*transmissionmax_dual[2,C16] + 400*transmissionmax_dual[3,C16] + 400*transmissionmax_dual[4,C16] + 400*transmissionmax_dual[5,C16] + 400*transmissionmax_dual[6,C16] + 400*transmissionmax_dual[7,C16] + 400*transmissionmax_dual[8,C16] + 400*transmissionmax_dual[9,C16] + 400*transmissionmax_dual[10,C16] + 400*transmissionmax_dual[11,C16] + 400*transmissionmax_dual[12,C16] + 400*transmissionmax_dual[13,C16] + 400*transmissionmax_dual[14,C16] + 400*transmissionmax_dual[15,C16] + 400*transmissionmax_dual[16,C16] + 400*transmissionmax_dual[17,C16] + 400*transmissionmax_dual[18,C16] + 400*transmissionmax_dual[19,C16] + 400*transmissionmax_dual[20,C16] + 400*transmissionmax_dual[21,C16] + 400*transmissionmax_dual[22,C16] + 400*transmissionmax_dual[23,C16] + 400*transmissionmax_dual[24,C16] + 400*transmissionmax_dual[1,C17] + 400*transmissionmax_dual[2,C17] + 400*transmissionmax_dual[3,C17] + 400*transmissionmax_dual[4,C17] + 400*transmissionmax_dual[5,C17] + 400*transmissionmax_dual[6,C17] + 400*transmissionmax_dual[7,C17] + 400*transmissionmax_dual[8,C17] + 400*transmissionmax_dual[9,C17] + 400*transmissionmax_dual[10,C17] + 400*transmissionmax_dual[11,C17] + 400*transmissionmax_dual[12,C17] + 400*transmissionmax_dual[13,C17] + 400*transmissionmax_dual[14,C17] + 400*transmissionmax_dual[15,C17] + 400*transmissionmax_dual[16,C17] + 400*transmissionmax_dual[17,C17] + 400*transmissionmax_dual[18,C17] + 400*transmissionmax_dual[19,C17] + 400*transmissionmax_dual[20,C17] + 400*transmissionmax_dual[21,C17] + 400*transmissionmax_dual[22,C17] + 400*transmissionmax_dual[23,C17] + 400*transmissionmax_dual[24,C17] + 500*transmissionmax_dual[1,C18] + 500*transmissionmax_dual[2,C18] + 500*transmissionmax_dual[3,C18] + 500*transmissionmax_dual[4,C18] + 500*transmissionmax_dual[5,C18] + 500*transmissionmax_dual[6,C18] + 500*transmissionmax_dual[7,C18] + 500*transmissionmax_dual[8,C18] + 500*transmissionmax_dual[9,C18] + 500*transmissionmax_dual[10,C18] + 500*transmissionmax_dual[11,C18] + 500*transmissionmax_dual[12,C18] + 500*transmissionmax_dual[13,C18] + 500*transmissionmax_dual[14,C18] + 500*transmissionmax_dual[15,C18] + 500*transmissionmax_dual[16,C18] + 500*transmissionmax_dual[17,C18] + 500*transmissionmax_dual[18,C18] + 500*transmissionmax_dual[19,C18] + 500*transmissionmax_dual[20,C18] + 500*transmissionmax_dual[21,C18] + 500*transmissionmax_dual[22,C18] + 500*transmissionmax_dual[23,C18] + 500*transmissionmax_dual[24,C18] + 500*transmissionmax_dual[1,C19] + 500*transmissionmax_dual[2,C19] + 500*transmissionmax_dual[3,C19] + 500*transmissionmax_dual[4,C19] + 500*transmissionmax_dual[5,C19] + 500*transmissionmax_dual[6,C19] + 500*transmissionmax_dual[7,C19] + 500*transmissionmax_dual[8,C19] + 500*transmissionmax_dual[9,C19] + 500*transmissionmax_dual[10,C19] + 500*transmissionmax_dual[11,C19] + 500*transmissionmax_dual[12,C19] + 500*transmissionmax_dual[13,C19] + 500*transmissionmax_dual[14,C19] + 500*transmissionmax_dual[15,C19] + 500*transmissionmax_dual[16,C19] + 500*transmissionmax_dual[17,C19] + 500*transmissionmax_dual[18,C19] + 500*transmissionmax_dual[19,C19] + 500*transmissionmax_dual[20,C19] + 500*transmissionmax_dual[21,C19] + 500*transmissionmax_dual[22,C19] + 500*transmissionmax_dual[23,C19] + 500*transmissionmax_dual[24,C19] + 500*transmissionmax_dual[1,C20] + 500*transmissionmax_dual[2,C20] + 500*transmissionmax_dual[3,C20] + 500*transmissionmax_dual[4,C20] + 500*transmissionmax_dual[5,C20] + 500*transmissionmax_dual[6,C20] + 500*transmissionmax_dual[7,C20] + 500*transmissionmax_dual[8,C20] + 500*transmissionmax_dual[9,C20] + 500*transmissionmax_dual[10,C20] + 500*transmissionmax_dual[11,C20] + 500*transmissionmax_dual[12,C20] + 500*transmissionmax_dual[13,C20] + 500*transmissionmax_dual[14,C20] + 500*transmissionmax_dual[15,C20] + 500*transmissionmax_dual[16,C20] + 500*transmissionmax_dual[17,C20] + 500*transmissionmax_dual[18,C20] + 500*transmissionmax_dual[19,C20] + 500*transmissionmax_dual[20,C20] + 500*transmissionmax_dual[21,C20] + 500*transmissionmax_dual[22,C20] + 500*transmissionmax_dual[23,C20] + 500*transmissionmax_dual[24,C20] + 500*transmissionmax_dual[1,C21] + 500*transmissionmax_dual[2,C21] + 500*transmissionmax_dual[3,C21] + 500*transmissionmax_dual[4,C21] + 500*transmissionmax_dual[5,C21] + 500*transmissionmax_dual[6,C21] + 500*transmissionmax_dual[7,C21] + 500*transmissionmax_dual[8,C21] + 500*transmissionmax_dual[9,C21] + 500*transmissionmax_dual[10,C21] + 500*transmissionmax_dual[11,C21] + 500*transmissionmax_dual[12,C21] + 500*transmissionmax_dual[13,C21] + 500*transmissionmax_dual[14,C21] + 500*transmissionmax_dual[15,C21] + 500*transmissionmax_dual[16,C21] + 500*transmissionmax_dual[17,C21] + 500*transmissionmax_dual[18,C21] + 500*transmissionmax_dual[19,C21] + 500*transmissionmax_dual[20,C21] + 500*transmissionmax_dual[21,C21] + 500*transmissionmax_dual[22,C21] + 500*transmissionmax_dual[23,C21] + 500*transmissionmax_dual[24,C21] + 500*transmissionmax_dual[1,C22] + 500*transmissionmax_dual[2,C22] + 500*transmissionmax_dual[3,C22] + 500*transmissionmax_dual[4,C22] + 500*transmissionmax_dual[5,C22] + 500*transmissionmax_dual[6,C22] + 500*transmissionmax_dual[7,C22] + 500*transmissionmax_dual[8,C22] + 500*transmissionmax_dual[9,C22] + 500*transmissionmax_dual[10,C22] + 500*transmissionmax_dual[11,C22] + 500*transmissionmax_dual[12,C22] + 500*transmissionmax_dual[13,C22] + 500*transmissionmax_dual[14,C22] + 500*transmissionmax_dual[15,C22] + 500*transmissionmax_dual[16,C22] + 500*transmissionmax_dual[17,C22] + 500*transmissionmax_dual[18,C22] + 500*transmissionmax_dual[19,C22] + 500*transmissionmax_dual[20,C22] + 500*transmissionmax_dual[21,C22] + 500*transmissionmax_dual[22,C22] + 500*transmissionmax_dual[23,C22] + 500*transmissionmax_dual[24,C22] + 500*transmissionmax_dual[1,C23] + 500*transmissionmax_dual[2,C23] + 500*transmissionmax_dual[3,C23] + 500*transmissionmax_dual[4,C23] + 500*transmissionmax_dual[5,C23] + 500*transmissionmax_dual[6,C23] + 500*transmissionmax_dual[7,C23] + 500*transmissionmax_dual[8,C23] + 500*transmissionmax_dual[9,C23] + 500*transmissionmax_dual[10,C23] + 500*transmissionmax_dual[11,C23] + 500*transmissionmax_dual[12,C23] + 500*transmissionmax_dual[13,C23] + 500*transmissionmax_dual[14,C23] + 500*transmissionmax_dual[15,C23] + 500*transmissionmax_dual[16,C23] + 500*transmissionmax_dual[17,C23] + 500*transmissionmax_dual[18,C23] + 500*transmissionmax_dual[19,C23] + 500*transmissionmax_dual[20,C23] + 500*transmissionmax_dual[21,C23] + 500*transmissionmax_dual[22,C23] + 500*transmissionmax_dual[23,C23] + 500*transmissionmax_dual[24,C23] + 500*transmissionmax_dual[1,C24] + 500*transmissionmax_dual[2,C24] + 500*transmissionmax_dual[3,C24] + 500*transmissionmax_dual[4,C24] + 500*transmissionmax_dual[5,C24] + 500*transmissionmax_dual[6,C24] + 500*transmissionmax_dual[7,C24] + 500*transmissionmax_dual[8,C24] + 500*transmissionmax_dual[9,C24] + 500*transmissionmax_dual[10,C24] + 500*transmissionmax_dual[11,C24] + 500*transmissionmax_dual[12,C24] + 500*transmissionmax_dual[13,C24] + 500*transmissionmax_dual[14,C24] + 500*transmissionmax_dual[15,C24] + 500*transmissionmax_dual[16,C24] + 500*transmissionmax_dual[17,C24] + 500*transmissionmax_dual[18,C24] + 500*transmissionmax_dual[19,C24] + 500*transmissionmax_dual[20,C24] + 500*transmissionmax_dual[21,C24] + 500*transmissionmax_dual[22,C24] + 500*transmissionmax_dual[23,C24] + 500*transmissionmax_dual[24,C24] + 500*transmissionmax_dual[1,C25-1] + 500*transmissionmax_dual[2,C25-1] + 500*transmissionmax_dual[3,C25-1] + 500*transmissionmax_dual[4,C25-1] + 500*transmissionmax_dual[5,C25-1] + 500*transmissionmax_dual[6,C25-1] + 500*transmissionmax_dual[7,C25-1] + 500*transmissionmax_dual[8,C25-1] + 500*transmissionmax_dual[9,C25-1] + 500*transmissionmax_dual[10,C25-1] + 500*transmissionmax_dual[11,C25-1] + 500*transmissionmax_dual[12,C25-1] + 500*transmissionmax_dual[13,C25-1] + 500*transmissionmax_dual[14,C25-1] + 500*transmissionmax_dual[15,C25-1] + 500*transmissionmax_dual[16,C25-1] + 500*transmissionmax_dual[17,C25-1] + 500*transmissionmax_dual[18,C25-1] + 500*transmissionmax_dual[19,C25-1] + 500*transmissionmax_dual[20,C25-1] + 500*transmissionmax_dual[21,C25-1] + 500*transmissionmax_dual[22,C25-1] + 500*transmissionmax_dual[23,C25-1] + 500*transmissionmax_dual[24,C25-1] + 500*transmissionmax_dual[1,C25-2] + 500*transmissionmax_dual[2,C25-2] + 500*transmissionmax_dual[3,C25-2] + 500*transmissionmax_dual[4,C25-2] + 500*transmissionmax_dual[5,C25-2] + 500*transmissionmax_dual[6,C25-2] + 500*transmissionmax_dual[7,C25-2] + 500*transmissionmax_dual[8,C25-2] + 500*transmissionmax_dual[9,C25-2] + 500*transmissionmax_dual[10,C25-2] + 500*transmissionmax_dual[11,C25-2] + 500*transmissionmax_dual[12,C25-2] + 500*transmissionmax_dual[13,C25-2] + 500*transmissionmax_dual[14,C25-2] + 500*transmissionmax_dual[15,C25-2] + 500*transmissionmax_dual[16,C25-2] + 500*transmissionmax_dual[17,C25-2] + 500*transmissionmax_dual[18,C25-2] + 500*transmissionmax_dual[19,C25-2] + 500*transmissionmax_dual[20,C25-2] + 500*transmissionmax_dual[21,C25-2] + 500*transmissionmax_dual[22,C25-2] + 500*transmissionmax_dual[23,C25-2] + 500*transmissionmax_dual[24,C25-2] + 500*transmissionmax_dual[1,C26] + 500*transmissionmax_dual[2,C26] + 500*transmissionmax_dual[3,C26] + 500*transmissionmax_dual[4,C26] + 500*transmissionmax_dual[5,C26] + 500*transmissionmax_dual[6,C26] + 500*transmissionmax_dual[7,C26] + 500*transmissionmax_dual[8,C26] + 500*transmissionmax_dual[9,C26] + 500*transmissionmax_dual[10,C26] + 500*transmissionmax_dual[11,C26] + 500*transmissionmax_dual[12,C26] + 500*transmissionmax_dual[13,C26] + 500*transmissionmax_dual[14,C26] + 500*transmissionmax_dual[15,C26] + 500*transmissionmax_dual[16,C26] + 500*transmissionmax_dual[17,C26] + 500*transmissionmax_dual[18,C26] + 500*transmissionmax_dual[19,C26] + 500*transmissionmax_dual[20,C26] + 500*transmissionmax_dual[21,C26] + 500*transmissionmax_dual[22,C26] + 500*transmissionmax_dual[23,C26] + 500*transmissionmax_dual[24,C26] + 500*transmissionmax_dual[1,C27] + 500*transmissionmax_dual[2,C27] + 500*transmissionmax_dual[3,C27] + 500*transmissionmax_dual[4,C27] + 500*transmissionmax_dual[5,C27] + 500*transmissionmax_dual[6,C27] + 500*transmissionmax_dual[7,C27] + 500*transmissionmax_dual[8,C27] + 500*transmissionmax_dual[9,C27] + 500*transmissionmax_dual[10,C27] + 500*transmissionmax_dual[11,C27] + 500*transmissionmax_dual[12,C27] + 500*transmissionmax_dual[13,C27] + 500*transmissionmax_dual[14,C27] + 500*transmissionmax_dual[15,C27] + 500*transmissionmax_dual[16,C27] + 500*transmissionmax_dual[17,C27] + 500*transmissionmax_dual[18,C27] + 500*transmissionmax_dual[19,C27] + 500*transmissionmax_dual[20,C27] + 500*transmissionmax_dual[21,C27] + 500*transmissionmax_dual[22,C27] + 500*transmissionmax_dual[23,C27] + 500*transmissionmax_dual[24,C27] + 500*transmissionmax_dual[1,C28] + 500*transmissionmax_dual[2,C28] + 500*transmissionmax_dual[3,C28] + 500*transmissionmax_dual[4,C28] + 500*transmissionmax_dual[5,C28] + 500*transmissionmax_dual[6,C28] + 500*transmissionmax_dual[7,C28] + 500*transmissionmax_dual[8,C28] + 500*transmissionmax_dual[9,C28] + 500*transmissionmax_dual[10,C28] + 500*transmissionmax_dual[11,C28] + 500*transmissionmax_dual[12,C28] + 500*transmissionmax_dual[13,C28] + 500*transmissionmax_dual[14,C28] + 500*transmissionmax_dual[15,C28] + 500*transmissionmax_dual[16,C28] + 500*transmissionmax_dual[17,C28] + 500*transmissionmax_dual[18,C28] + 500*transmissionmax_dual[19,C28] + 500*transmissionmax_dual[20,C28] + 500*transmissionmax_dual[21,C28] + 500*transmissionmax_dual[22,C28] + 500*transmissionmax_dual[23,C28] + 500*transmissionmax_dual[24,C28] + 500*transmissionmax_dual[1,C29] + 500*transmissionmax_dual[2,C29] + 500*transmissionmax_dual[3,C29] + 500*transmissionmax_dual[4,C29] + 500*transmissionmax_dual[5,C29] + 500*transmissionmax_dual[6,C29] + 500*transmissionmax_dual[7,C29] + 500*transmissionmax_dual[8,C29] + 500*transmissionmax_dual[9,C29] + 500*transmissionmax_dual[10,C29] + 500*transmissionmax_dual[11,C29] + 500*transmissionmax_dual[12,C29] + 500*transmissionmax_dual[13,C29] + 500*transmissionmax_dual[14,C29] + 500*transmissionmax_dual[15,C29] + 500*transmissionmax_dual[16,C29] + 500*transmissionmax_dual[17,C29] + 500*transmissionmax_dual[18,C29] + 500*transmissionmax_dual[19,C29] + 500*transmissionmax_dual[20,C29] + 500*transmissionmax_dual[21,C29] + 500*transmissionmax_dual[22,C29] + 500*transmissionmax_dual[23,C29] + 500*transmissionmax_dual[24,C29] + 500*transmissionmax_dual[1,C30] + 500*transmissionmax_dual[2,C30] + 500*transmissionmax_dual[3,C30] + 500*transmissionmax_dual[4,C30] + 500*transmissionmax_dual[5,C30] + 500*transmissionmax_dual[6,C30] + 500*transmissionmax_dual[7,C30] + 500*transmissionmax_dual[8,C30] + 500*transmissionmax_dual[9,C30] + 500*transmissionmax_dual[10,C30] + 500*transmissionmax_dual[11,C30] + 500*transmissionmax_dual[12,C30] + 500*transmissionmax_dual[13,C30] + 500*transmissionmax_dual[14,C30] + 500*transmissionmax_dual[15,C30] + 500*transmissionmax_dual[16,C30] + 500*transmissionmax_dual[17,C30] + 500*transmissionmax_dual[18,C30] + 500*transmissionmax_dual[19,C30] + 500*transmissionmax_dual[20,C30] + 500*transmissionmax_dual[21,C30] + 500*transmissionmax_dual[22,C30] + 500*transmissionmax_dual[23,C30] + 500*transmissionmax_dual[24,C30] + 500*transmissionmax_dual[1,C31-1] + 500*transmissionmax_dual[2,C31-1] + 500*transmissionmax_dual[3,C31-1] + 500*transmissionmax_dual[4,C31-1] + 500*transmissionmax_dual[5,C31-1] + 500*transmissionmax_dual[6,C31-1] + 500*transmissionmax_dual[7,C31-1] + 500*transmissionmax_dual[8,C31-1] + 500*transmissionmax_dual[9,C31-1] + 500*transmissionmax_dual[10,C31-1] + 500*transmissionmax_dual[11,C31-1] + 500*transmissionmax_dual[12,C31-1] + 500*transmissionmax_dual[13,C31-1] + 500*transmissionmax_dual[14,C31-1] + 500*transmissionmax_dual[15,C31-1] + 500*transmissionmax_dual[16,C31-1] + 500*transmissionmax_dual[17,C31-1] + 500*transmissionmax_dual[18,C31-1] + 500*transmissionmax_dual[19,C31-1] + 500*transmissionmax_dual[20,C31-1] + 500*transmissionmax_dual[21,C31-1] + 500*transmissionmax_dual[22,C31-1] + 500*transmissionmax_dual[23,C31-1] + 500*transmissionmax_dual[24,C31-1] + 500*transmissionmax_dual[1,C31-2] + 500*transmissionmax_dual[2,C31-2] + 500*transmissionmax_dual[3,C31-2] + 500*transmissionmax_dual[4,C31-2] + 500*transmissionmax_dual[5,C31-2] + 500*transmissionmax_dual[6,C31-2] + 500*transmissionmax_dual[7,C31-2] + 500*transmissionmax_dual[8,C31-2] + 500*transmissionmax_dual[9,C31-2] + 500*transmissionmax_dual[10,C31-2] + 500*transmissionmax_dual[11,C31-2] + 500*transmissionmax_dual[12,C31-2] + 500*transmissionmax_dual[13,C31-2] + 500*transmissionmax_dual[14,C31-2] + 500*transmissionmax_dual[15,C31-2] + 500*transmissionmax_dual[16,C31-2] + 500*transmissionmax_dual[17,C31-2] + 500*transmissionmax_dual[18,C31-2] + 500*transmissionmax_dual[19,C31-2] + 500*transmissionmax_dual[20,C31-2] + 500*transmissionmax_dual[21,C31-2] + 500*transmissionmax_dual[22,C31-2] + 500*transmissionmax_dual[23,C31-2] + 500*transmissionmax_dual[24,C31-2] + 500*transmissionmax_dual[1,C32-1] + 500*transmissionmax_dual[2,C32-1] + 500*transmissionmax_dual[3,C32-1] + 500*transmissionmax_dual[4,C32-1] + 500*transmissionmax_dual[5,C32-1] + 500*transmissionmax_dual[6,C32-1] + 500*transmissionmax_dual[7,C32-1] + 500*transmissionmax_dual[8,C32-1] + 500*transmissionmax_dual[9,C32-1] + 500*transmissionmax_dual[10,C32-1] + 500*transmissionmax_dual[11,C32-1] + 500*transmissionmax_dual[12,C32-1] + 500*transmissionmax_dual[13,C32-1] + 500*transmissionmax_dual[14,C32-1] + 500*transmissionmax_dual[15,C32-1] + 500*transmissionmax_dual[16,C32-1] + 500*transmissionmax_dual[17,C32-1] + 500*transmissionmax_dual[18,C32-1] + 500*transmissionmax_dual[19,C32-1] + 500*transmissionmax_dual[20,C32-1] + 500*transmissionmax_dual[21,C32-1] + 500*transmissionmax_dual[22,C32-1] + 500*transmissionmax_dual[23,C32-1] + 500*transmissionmax_dual[24,C32-1] + 500*transmissionmax_dual[1,C32-2] + 500*transmissionmax_dual[2,C32-2] + 500*transmissionmax_dual[3,C32-2] + 500*transmissionmax_dual[4,C32-2] + 500*transmissionmax_dual[5,C32-2] + 500*transmissionmax_dual[6,C32-2] + 500*transmissionmax_dual[7,C32-2] + 500*transmissionmax_dual[8,C32-2] + 500*transmissionmax_dual[9,C32-2] + 500*transmissionmax_dual[10,C32-2] + 500*transmissionmax_dual[11,C32-2] + 500*transmissionmax_dual[12,C32-2] + 500*transmissionmax_dual[13,C32-2] + 500*transmissionmax_dual[14,C32-2] + 500*transmissionmax_dual[15,C32-2] + 500*transmissionmax_dual[16,C32-2] + 500*transmissionmax_dual[17,C32-2] + 500*transmissionmax_dual[18,C32-2] + 500*transmissionmax_dual[19,C32-2] + 500*transmissionmax_dual[20,C32-2] + 500*transmissionmax_dual[21,C32-2] + 500*transmissionmax_dual[22,C32-2] + 500*transmissionmax_dual[23,C32-2] + 500*transmissionmax_dual[24,C32-2] + 500*transmissionmax_dual[1,C33-1] + 500*transmissionmax_dual[2,C33-1] + 500*transmissionmax_dual[3,C33-1] + 500*transmissionmax_dual[4,C33-1] + 500*transmissionmax_dual[5,C33-1] + 500*transmissionmax_dual[6,C33-1] + 500*transmissionmax_dual[7,C33-1] + 500*transmissionmax_dual[8,C33-1] + 500*transmissionmax_dual[9,C33-1] + 500*transmissionmax_dual[10,C33-1] + 500*transmissionmax_dual[11,C33-1] + 500*transmissionmax_dual[12,C33-1] + 500*transmissionmax_dual[13,C33-1] + 500*transmissionmax_dual[14,C33-1] + 500*transmissionmax_dual[15,C33-1] + 500*transmissionmax_dual[16,C33-1] + 500*transmissionmax_dual[17,C33-1] + 500*transmissionmax_dual[18,C33-1] + 500*transmissionmax_dual[19,C33-1] + 500*transmissionmax_dual[20,C33-1] + 500*transmissionmax_dual[21,C33-1] + 500*transmissionmax_dual[22,C33-1] + 500*transmissionmax_dual[23,C33-1] + 500*transmissionmax_dual[24,C33-1] + 500*transmissionmax_dual[1,C33-2] + 500*transmissionmax_dual[2,C33-2] + 500*transmissionmax_dual[3,C33-2] + 500*transmissionmax_dual[4,C33-2] + 500*transmissionmax_dual[5,C33-2] + 500*transmissionmax_dual[6,C33-2] + 500*transmissionmax_dual[7,C33-2] + 500*transmissionmax_dual[8,C33-2] + 500*transmissionmax_dual[9,C33-2] + 500*transmissionmax_dual[10,C33-2] + 500*transmissionmax_dual[11,C33-2] + 500*transmissionmax_dual[12,C33-2] + 500*transmissionmax_dual[13,C33-2] + 500*transmissionmax_dual[14,C33-2] + 500*transmissionmax_dual[15,C33-2] + 500*transmissionmax_dual[16,C33-2] + 500*transmissionmax_dual[17,C33-2] + 500*transmissionmax_dual[18,C33-2] + 500*transmissionmax_dual[19,C33-2] + 500*transmissionmax_dual[20,C33-2] + 500*transmissionmax_dual[21,C33-2] + 500*transmissionmax_dual[22,C33-2] + 500*transmissionmax_dual[23,C33-2] + 500*transmissionmax_dual[24,C33-2] + 500*transmissionmax_dual[1,C34] + 500*transmissionmax_dual[2,C34] + 500*transmissionmax_dual[3,C34] + 500*transmissionmax_dual[4,C34] + 500*transmissionmax_dual[5,C34] + 500*transmissionmax_dual[6,C34] + 500*transmissionmax_dual[7,C34] + 500*transmissionmax_dual[8,C34] + 500*transmissionmax_dual[9,C34] + 500*transmissionmax_dual[10,C34] + 500*transmissionmax_dual[11,C34] + 500*transmissionmax_dual[12,C34] + 500*transmissionmax_dual[13,C34] + 500*transmissionmax_dual[14,C34] + 500*transmissionmax_dual[15,C34] + 500*transmissionmax_dual[16,C34] + 500*transmissionmax_dual[17,C34] + 500*transmissionmax_dual[18,C34] + 500*transmissionmax_dual[19,C34] + 500*transmissionmax_dual[20,C34] + 500*transmissionmax_dual[21,C34] + 500*transmissionmax_dual[22,C34] + 500*transmissionmax_dual[23,C34] + 500*transmissionmax_dual[24,C34] + 722*transmissionmax_dual[1,C35] + 722*transmissionmax_dual[2,C35] + 722*transmissionmax_dual[3,C35] + 722*transmissionmax_dual[4,C35] + 722*transmissionmax_dual[5,C35] + 722*transmissionmax_dual[6,C35] + 722*transmissionmax_dual[7,C35] + 722*transmissionmax_dual[8,C35] + 722*transmissionmax_dual[9,C35] + 722*transmissionmax_dual[10,C35] + 722*transmissionmax_dual[11,C35] + 722*transmissionmax_dual[12,C35] + 722*transmissionmax_dual[13,C35] + 722*transmissionmax_dual[14,C35] + 722*transmissionmax_dual[15,C35] + 722*transmissionmax_dual[16,C35] + 722*transmissionmax_dual[17,C35] + 722*transmissionmax_dual[18,C35] + 722*transmissionmax_dual[19,C35] + 722*transmissionmax_dual[20,C35] + 722*transmissionmax_dual[21,C35] + 722*transmissionmax_dual[22,C35] + 722*transmissionmax_dual[23,C35] + 722*transmissionmax_dual[24,C35]
min
-175*transmissionmin_dual[1,C1] - 175*transmissionmin_dual[2,C1] - 175*transmissionmin_dual[3,C1] - 175*transmissionmin_dual[4,C1] - 175*transmissionmin_dual[5,C1] - 175*transmissionmin_dual[6,C1] - 175*transmissionmin_dual[7,C1] - 175*transmissionmin_dual[8,C1] - 175*transmissionmin_dual[9,C1] - 175*transmissionmin_dual[10,C1] - 175*transmissionmin_dual[11,C1] - 175*transmissionmin_dual[12,C1] - 175*transmissionmin_dual[13,C1] - 175*transmissionmin_dual[14,C1] - 175*transmissionmin_dual[15,C1] - 175*transmissionmin_dual[16,C1] - 175*transmissionmin_dual[17,C1] - 175*transmissionmin_dual[18,C1] - 175*transmissionmin_dual[19,C1] - 175*transmissionmin_dual[20,C1] - 175*transmissionmin_dual[21,C1] - 175*transmissionmin_dual[22,C1] - 175*transmissionmin_dual[23,C1] - 175*transmissionmin_dual[24,C1] - 175*transmissionmin_dual[1,C2] - 175*transmissionmin_dual[2,C2] - 175*transmissionmin_dual[3,C2] - 175*transmissionmin_dual[4,C2] - 175*transmissionmin_dual[5,C2] - 175*transmissionmin_dual[6,C2] - 175*transmissionmin_dual[7,C2] - 175*transmissionmin_dual[8,C2] - 175*transmissionmin_dual[9,C2] - 175*transmissionmin_dual[10,C2] - 175*transmissionmin_dual[11,C2] - 175*transmissionmin_dual[12,C2] - 175*transmissionmin_dual[13,C2] - 175*transmissionmin_dual[14,C2] - 175*transmissionmin_dual[15,C2] - 175*transmissionmin_dual[16,C2] - 175*transmissionmin_dual[17,C2] - 175*transmissionmin_dual[18,C2] - 175*transmissionmin_dual[19,C2] - 175*transmissionmin_dual[20,C2] - 175*transmissionmin_dual[21,C2] - 175*transmissionmin_dual[22,C2] - 175*transmissionmin_dual[23,C2] - 175*transmissionmin_dual[24,C2] - 175*transmissionmin_dual[1,C3] - 175*transmissionmin_dual[2,C3] - 175*transmissionmin_dual[3,C3] - 175*transmissionmin_dual[4,C3] - 175*transmissionmin_dual[5,C3] - 175*transmissionmin_dual[6,C3] - 175*transmissionmin_dual[7,C3] - 175*transmissionmin_dual[8,C3] - 175*transmissionmin_dual[9,C3] - 175*transmissionmin_dual[10,C3] - 175*transmissionmin_dual[11,C3] - 175*transmissionmin_dual[12,C3] - 175*transmissionmin_dual[13,C3] - 175*transmissionmin_dual[14,C3] - 175*transmissionmin_dual[15,C3] - 175*transmissionmin_dual[16,C3] - 175*transmissionmin_dual[17,C3] - 175*transmissionmin_dual[18,C3] - 175*transmissionmin_dual[19,C3] - 175*transmissionmin_dual[20,C3] - 175*transmissionmin_dual[21,C3] - 175*transmissionmin_dual[22,C3] - 175*transmissionmin_dual[23,C3] - 175*transmissionmin_dual[24,C3] - 175*transmissionmin_dual[1,C4] - 175*transmissionmin_dual[2,C4] - 175*transmissionmin_dual[3,C4] - 175*transmissionmin_dual[4,C4] - 175*transmissionmin_dual[5,C4] - 175*transmissionmin_dual[6,C4] - 175*transmissionmin_dual[7,C4] - 175*transmissionmin_dual[8,C4] - 175*transmissionmin_dual[9,C4] - 175*transmissionmin_dual[10,C4] - 175*transmissionmin_dual[11,C4] - 175*transmissionmin_dual[12,C4] - 175*transmissionmin_dual[13,C4] - 175*transmissionmin_dual[14,C4] - 175*transmissionmin_dual[15,C4] - 175*transmissionmin_dual[16,C4] - 175*transmissionmin_dual[17,C4] - 175*transmissionmin_dual[18,C4] - 175*transmissionmin_dual[19,C4] - 175*transmissionmin_dual[20,C4] - 175*transmissionmin_dual[21,C4] - 175*transmissionmin_dual[22,C4] - 175*transmissionmin_dual[23,C4] - 175*transmissionmin_dual[24,C4] - 175*transmissionmin_dual[1,C5] - 175*transmissionmin_dual[2,C5] - 175*transmissionmin_dual[3,C5] - 175*transmissionmin_dual[4,C5] - 175*transmissionmin_dual[5,C5] - 175*transmissionmin_dual[6,C5] - 175*transmissionmin_dual[7,C5] - 175*transmissionmin_dual[8,C5] - 175*transmissionmin_dual[9,C5] - 175*transmissionmin_dual[10,C5] - 175*transmissionmin_dual[11,C5] - 175*transmissionmin_dual[12,C5] - 175*transmissionmin_dual[13,C5] - 175*transmissionmin_dual[14,C5] - 175*transmissionmin_dual[15,C5] - 175*transmissionmin_dual[16,C5] - 175*transmissionmin_dual[17,C5] - 175*transmissionmin_dual[18,C5] - 175*transmissionmin_dual[19,C5] - 175*transmissionmin_dual[20,C5] - 175*transmissionmin_dual[21,C5] - 175*transmissionmin_dual[22,C5] - 175*transmissionmin_dual[23,C5] - 175*transmissionmin_dual[24,C5] - 175*transmissionmin_dual[1,C6] - 175*transmissionmin_dual[2,C6] - 175*transmissionmin_dual[3,C6] - 175*transmissionmin_dual[4,C6] - 175*transmissionmin_dual[5,C6] - 175*transmissionmin_dual[6,C6] - 175*transmissionmin_dual[7,C6] - 175*transmissionmin_dual[8,C6] - 175*transmissionmin_dual[9,C6] - 175*transmissionmin_dual[10,C6] - 175*transmissionmin_dual[11,C6] - 175*transmissionmin_dual[12,C6] - 175*transmissionmin_dual[13,C6] - 175*transmissionmin_dual[14,C6] - 175*transmissionmin_dual[15,C6] - 175*transmissionmin_dual[16,C6] - 175*transmissionmin_dual[17,C6] - 175*transmissionmin_dual[18,C6] - 175*transmissionmin_dual[19,C6] - 175*transmissionmin_dual[20,C6] - 175*transmissionmin_dual[21,C6] - 175*transmissionmin_dual[22,C6] - 175*transmissionmin_dual[23,C6] - 175*transmissionmin_dual[24,C6] - 400*transmissionmin_dual[1,C7] - 400*transmissionmin_dual[2,C7] - 400*transmissionmin_dual[3,C7] - 400*transmissionmin_dual[4,C7] - 400*transmissionmin_dual[5,C7] - 400*transmissionmin_dual[6,C7] - 400*transmissionmin_dual[7,C7] - 400*transmissionmin_dual[8,C7] - 400*transmissionmin_dual[9,C7] - 400*transmissionmin_dual[10,C7] - 400*transmissionmin_dual[11,C7] - 400*transmissionmin_dual[12,C7] - 400*transmissionmin_dual[13,C7] - 400*transmissionmin_dual[14,C7] - 400*transmissionmin_dual[15,C7] - 400*transmissionmin_dual[16,C7] - 400*transmissionmin_dual[17,C7] - 400*transmissionmin_dual[18,C7] - 400*transmissionmin_dual[19,C7] - 400*transmissionmin_dual[20,C7] - 400*transmissionmin_dual[21,C7] - 400*transmissionmin_dual[22,C7] - 400*transmissionmin_dual[23,C7] - 400*transmissionmin_dual[24,C7] - 175*transmissionmin_dual[1,C8] - 175*transmissionmin_dual[2,C8] - 175*transmissionmin_dual[3,C8] - 175*transmissionmin_dual[4,C8] - 175*transmissionmin_dual[5,C8] - 175*transmissionmin_dual[6,C8] - 175*transmissionmin_dual[7,C8] - 175*transmissionmin_dual[8,C8] - 175*transmissionmin_dual[9,C8] - 175*transmissionmin_dual[10,C8] - 175*transmissionmin_dual[11,C8] - 175*transmissionmin_dual[12,C8] - 175*transmissionmin_dual[13,C8] - 175*transmissionmin_dual[14,C8] - 175*transmissionmin_dual[15,C8] - 175*transmissionmin_dual[16,C8] - 175*transmissionmin_dual[17,C8] - 175*transmissionmin_dual[18,C8] - 175*transmissionmin_dual[19,C8] - 175*transmissionmin_dual[20,C8] - 175*transmissionmin_dual[21,C8] - 175*transmissionmin_dual[22,C8] - 175*transmissionmin_dual[23,C8] - 175*transmissionmin_dual[24,C8] - 175*transmissionmin_dual[1,C9] - 175*transmissionmin_dual[2,C9] - 175*transmissionmin_dual[3,C9] - 175*transmissionmin_dual[4,C9] - 175*transmissionmin_dual[5,C9] - 175*transmissionmin_dual[6,C9] - 175*transmissionmin_dual[7,C9] - 175*transmissionmin_dual[8,C9] - 175*transmissionmin_dual[9,C9] - 175*transmissionmin_dual[10,C9] - 175*transmissionmin_dual[11,C9] - 175*transmissionmin_dual[12,C9] - 175*transmissionmin_dual[13,C9] - 175*transmissionmin_dual[14,C9] - 175*transmissionmin_dual[15,C9] - 175*transmissionmin_dual[16,C9] - 175*transmissionmin_dual[17,C9] - 175*transmissionmin_dual[18,C9] - 175*transmissionmin_dual[19,C9] - 175*transmissionmin_dual[20,C9] - 175*transmissionmin_dual[21,C9] - 175*transmissionmin_dual[22,C9] - 175*transmissionmin_dual[23,C9] - 175*transmissionmin_dual[24,C9] - 175*transmissionmin_dual[1,C10] - 175*transmissionmin_dual[2,C10] - 175*transmissionmin_dual[3,C10] - 175*transmissionmin_dual[4,C10] - 175*transmissionmin_dual[5,C10] - 175*transmissionmin_dual[6,C10] - 175*transmissionmin_dual[7,C10] - 175*transmissionmin_dual[8,C10] - 175*transmissionmin_dual[9,C10] - 175*transmissionmin_dual[10,C10] - 175*transmissionmin_dual[11,C10] - 175*transmissionmin_dual[12,C10] - 175*transmissionmin_dual[13,C10] - 175*transmissionmin_dual[14,C10] - 175*transmissionmin_dual[15,C10] - 175*transmissionmin_dual[16,C10] - 175*transmissionmin_dual[17,C10] - 175*transmissionmin_dual[18,C10] - 175*transmissionmin_dual[19,C10] - 175*transmissionmin_dual[20,C10] - 175*transmissionmin_dual[21,C10] - 175*transmissionmin_dual[22,C10] - 175*transmissionmin_dual[23,C10] - 175*transmissionmin_dual[24,C10] - 175*transmissionmin_dual[1,C11] - 175*transmissionmin_dual[2,C11] - 175*transmissionmin_dual[3,C11] - 175*transmissionmin_dual[4,C11] - 175*transmissionmin_dual[5,C11] - 175*transmissionmin_dual[6,C11] - 175*transmissionmin_dual[7,C11] - 175*transmissionmin_dual[8,C11] - 175*transmissionmin_dual[9,C11] - 175*transmissionmin_dual[10,C11] - 175*transmissionmin_dual[11,C11] - 175*transmissionmin_dual[12,C11] - 175*transmissionmin_dual[13,C11] - 175*transmissionmin_dual[14,C11] - 175*transmissionmin_dual[15,C11] - 175*transmissionmin_dual[16,C11] - 175*transmissionmin_dual[17,C11] - 175*transmissionmin_dual[18,C11] - 175*transmissionmin_dual[19,C11] - 175*transmissionmin_dual[20,C11] - 175*transmissionmin_dual[21,C11] - 175*transmissionmin_dual[22,C11] - 175*transmissionmin_dual[23,C11] - 175*transmissionmin_dual[24,C11] - 175*transmissionmin_dual[1,C12-1] - 175*transmissionmin_dual[2,C12-1] - 175*transmissionmin_dual[3,C12-1] - 175*transmissionmin_dual[4,C12-1] - 175*transmissionmin_dual[5,C12-1] - 175*transmissionmin_dual[6,C12-1] - 175*transmissionmin_dual[7,C12-1] - 175*transmissionmin_dual[8,C12-1] - 175*transmissionmin_dual[9,C12-1] - 175*transmissionmin_dual[10,C12-1] - 175*transmissionmin_dual[11,C12-1] - 175*transmissionmin_dual[12,C12-1] - 175*transmissionmin_dual[13,C12-1] - 175*transmissionmin_dual[14,C12-1] - 175*transmissionmin_dual[15,C12-1] - 175*transmissionmin_dual[16,C12-1] - 175*transmissionmin_dual[17,C12-1] - 175*transmissionmin_dual[18,C12-1] - 175*transmissionmin_dual[19,C12-1] - 175*transmissionmin_dual[20,C12-1] - 175*transmissionmin_dual[21,C12-1] - 175*transmissionmin_dual[22,C12-1] - 175*transmissionmin_dual[23,C12-1] - 175*transmissionmin_dual[24,C12-1] - 175*transmissionmin_dual[1,C13-2] - 175*transmissionmin_dual[2,C13-2] - 175*transmissionmin_dual[3,C13-2] - 175*transmissionmin_dual[4,C13-2] - 175*transmissionmin_dual[5,C13-2] - 175*transmissionmin_dual[6,C13-2] - 175*transmissionmin_dual[7,C13-2] - 175*transmissionmin_dual[8,C13-2] - 175*transmissionmin_dual[9,C13-2] - 175*transmissionmin_dual[10,C13-2] - 175*transmissionmin_dual[11,C13-2] - 175*transmissionmin_dual[12,C13-2] - 175*transmissionmin_dual[13,C13-2] - 175*transmissionmin_dual[14,C13-2] - 175*transmissionmin_dual[15,C13-2] - 175*transmissionmin_dual[16,C13-2] - 175*transmissionmin_dual[17,C13-2] - 175*transmissionmin_dual[18,C13-2] - 175*transmissionmin_dual[19,C13-2] - 175*transmissionmin_dual[20,C13-2] - 175*transmissionmin_dual[21,C13-2] - 175*transmissionmin_dual[22,C13-2] - 175*transmissionmin_dual[23,C13-2] - 175*transmissionmin_dual[24,C13-2] - 400*transmissionmin_dual[1,C14] - 400*transmissionmin_dual[2,C14] - 400*transmissionmin_dual[3,C14] - 400*transmissionmin_dual[4,C14] - 400*transmissionmin_dual[5,C14] - 400*transmissionmin_dual[6,C14] - 400*transmissionmin_dual[7,C14] - 400*transmissionmin_dual[8,C14] - 400*transmissionmin_dual[9,C14] - 400*transmissionmin_dual[10,C14] - 400*transmissionmin_dual[11,C14] - 400*transmissionmin_dual[12,C14] - 400*transmissionmin_dual[13,C14] - 400*transmissionmin_dual[14,C14] - 400*transmissionmin_dual[15,C14] - 400*transmissionmin_dual[16,C14] - 400*transmissionmin_dual[17,C14] - 400*transmissionmin_dual[18,C14] - 400*transmissionmin_dual[19,C14] - 400*transmissionmin_dual[20,C14] - 400*transmissionmin_dual[21,C14] - 400*transmissionmin_dual[22,C14] - 400*transmissionmin_dual[23,C14] - 400*transmissionmin_dual[24,C14] - 400*transmissionmin_dual[1,C15] - 400*transmissionmin_dual[2,C15] - 400*transmissionmin_dual[3,C15] - 400*transmissionmin_dual[4,C15] - 400*transmissionmin_dual[5,C15] - 400*transmissionmin_dual[6,C15] - 400*transmissionmin_dual[7,C15] - 400*transmissionmin_dual[8,C15] - 400*transmissionmin_dual[9,C15] - 400*transmissionmin_dual[10,C15] - 400*transmissionmin_dual[11,C15] - 400*transmissionmin_dual[12,C15] - 400*transmissionmin_dual[13,C15] - 400*transmissionmin_dual[14,C15] - 400*transmissionmin_dual[15,C15] - 400*transmissionmin_dual[16,C15] - 400*transmissionmin_dual[17,C15] - 400*transmissionmin_dual[18,C15] - 400*transmissionmin_dual[19,C15] - 400*transmissionmin_dual[20,C15] - 400*transmissionmin_dual[21,C15] - 400*transmissionmin_dual[22,C15] - 400*transmissionmin_dual[23,C15] - 400*transmissionmin_dual[24,C15] - 400*transmissionmin_dual[1,C16] - 400*transmissionmin_dual[2,C16] - 400*transmissionmin_dual[3,C16] - 400*transmissionmin_dual[4,C16] - 400*transmissionmin_dual[5,C16] - 400*transmissionmin_dual[6,C16] - 400*transmissionmin_dual[7,C16] - 400*transmissionmin_dual[8,C16] - 400*transmissionmin_dual[9,C16] - 400*transmissionmin_dual[10,C16] - 400*transmissionmin_dual[11,C16] - 400*transmissionmin_dual[12,C16] - 400*transmissionmin_dual[13,C16] - 400*transmissionmin_dual[14,C16] - 400*transmissionmin_dual[15,C16] - 400*transmissionmin_dual[16,C16] - 400*transmissionmin_dual[17,C16] - 400*transmissionmin_dual[18,C16] - 400*transmissionmin_dual[19,C16] - 400*transmissionmin_dual[20,C16] - 400*transmissionmin_dual[21,C16] - 400*transmissionmin_dual[22,C16] - 400*transmissionmin_dual[23,C16] - 400*transmissionmin_dual[24,C16] - 400*transmissionmin_dual[1,C17] - 400*transmissionmin_dual[2,C17] - 400*transmissionmin_dual[3,C17] - 400*transmissionmin_dual[4,C17] - 400*transmissionmin_dual[5,C17] - 400*transmissionmin_dual[6,C17] - 400*transmissionmin_dual[7,C17] - 400*transmissionmin_dual[8,C17] - 400*transmissionmin_dual[9,C17] - 400*transmissionmin_dual[10,C17] - 400*transmissionmin_dual[11,C17] - 400*transmissionmin_dual[12,C17] - 400*transmissionmin_dual[13,C17] - 400*transmissionmin_dual[14,C17] - 400*transmissionmin_dual[15,C17] - 400*transmissionmin_dual[16,C17] - 400*transmissionmin_dual[17,C17] - 400*transmissionmin_dual[18,C17] - 400*transmissionmin_dual[19,C17] - 400*transmissionmin_dual[20,C17] - 400*transmissionmin_dual[21,C17] - 400*transmissionmin_dual[22,C17] - 400*transmissionmin_dual[23,C17] - 400*transmissionmin_dual[24,C17] - 500*transmissionmin_dual[1,C18] - 500*transmissionmin_dual[2,C18] - 500*transmissionmin_dual[3,C18] - 500*transmissionmin_dual[4,C18] - 500*transmissionmin_dual[5,C18] - 500*transmissionmin_dual[6,C18] - 500*transmissionmin_dual[7,C18] - 500*transmissionmin_dual[8,C18] - 500*transmissionmin_dual[9,C18] - 500*transmissionmin_dual[10,C18] - 500*transmissionmin_dual[11,C18] - 500*transmissionmin_dual[12,C18] - 500*transmissionmin_dual[13,C18] - 500*transmissionmin_dual[14,C18] - 500*transmissionmin_dual[15,C18] - 500*transmissionmin_dual[16,C18] - 500*transmissionmin_dual[17,C18] - 500*transmissionmin_dual[18,C18] - 500*transmissionmin_dual[19,C18] - 500*transmissionmin_dual[20,C18] - 500*transmissionmin_dual[21,C18] - 500*transmissionmin_dual[22,C18] - 500*transmissionmin_dual[23,C18] - 500*transmissionmin_dual[24,C18] - 500*transmissionmin_dual[1,C19] - 500*transmissionmin_dual[2,C19] - 500*transmissionmin_dual[3,C19] - 500*transmissionmin_dual[4,C19] - 500*transmissionmin_dual[5,C19] - 500*transmissionmin_dual[6,C19] - 500*transmissionmin_dual[7,C19] - 500*transmissionmin_dual[8,C19] - 500*transmissionmin_dual[9,C19] - 500*transmissionmin_dual[10,C19] - 500*transmissionmin_dual[11,C19] - 500*transmissionmin_dual[12,C19] - 500*transmissionmin_dual[13,C19] - 500*transmissionmin_dual[14,C19] - 500*transmissionmin_dual[15,C19] - 500*transmissionmin_dual[16,C19] - 500*transmissionmin_dual[17,C19] - 500*transmissionmin_dual[18,C19] - 500*transmissionmin_dual[19,C19] - 500*transmissionmin_dual[20,C19] - 500*transmissionmin_dual[21,C19] - 500*transmissionmin_dual[22,C19] - 500*transmissionmin_dual[23,C19] - 500*transmissionmin_dual[24,C19] - 500*transmissionmin_dual[1,C20] - 500*transmissionmin_dual[2,C20] - 500*transmissionmin_dual[3,C20] - 500*transmissionmin_dual[4,C20] - 500*transmissionmin_dual[5,C20] - 500*transmissionmin_dual[6,C20] - 500*transmissionmin_dual[7,C20] - 500*transmissionmin_dual[8,C20] - 500*transmissionmin_dual[9,C20] - 500*transmissionmin_dual[10,C20] - 500*transmissionmin_dual[11,C20] - 500*transmissionmin_dual[12,C20] - 500*transmissionmin_dual[13,C20] - 500*transmissionmin_dual[14,C20] - 500*transmissionmin_dual[15,C20] - 500*transmissionmin_dual[16,C20] - 500*transmissionmin_dual[17,C20] - 500*transmissionmin_dual[18,C20] - 500*transmissionmin_dual[19,C20] - 500*transmissionmin_dual[20,C20] - 500*transmissionmin_dual[21,C20] - 500*transmissionmin_dual[22,C20] - 500*transmissionmin_dual[23,C20] - 500*transmissionmin_dual[24,C20] - 500*transmissionmin_dual[1,C21] - 500*transmissionmin_dual[2,C21] - 500*transmissionmin_dual[3,C21] - 500*transmissionmin_dual[4,C21] - 500*transmissionmin_dual[5,C21] - 500*transmissionmin_dual[6,C21] - 500*transmissionmin_dual[7,C21] - 500*transmissionmin_dual[8,C21] - 500*transmissionmin_dual[9,C21] - 500*transmissionmin_dual[10,C21] - 500*transmissionmin_dual[11,C21] - 500*transmissionmin_dual[12,C21] - 500*transmissionmin_dual[13,C21] - 500*transmissionmin_dual[14,C21] - 500*transmissionmin_dual[15,C21] - 500*transmissionmin_dual[16,C21] - 500*transmissionmin_dual[17,C21] - 500*transmissionmin_dual[18,C21] - 500*transmissionmin_dual[19,C21] - 500*transmissionmin_dual[20,C21] - 500*transmissionmin_dual[21,C21] - 500*transmissionmin_dual[22,C21] - 500*transmissionmin_dual[23,C21] - 500*transmissionmin_dual[24,C21] - 500*transmissionmin_dual[1,C22] - 500*transmissionmin_dual[2,C22] - 500*transmissionmin_dual[3,C22] - 500*transmissionmin_dual[4,C22] - 500*transmissionmin_dual[5,C22] - 500*transmissionmin_dual[6,C22] - 500*transmissionmin_dual[7,C22] - 500*transmissionmin_dual[8,C22] - 500*transmissionmin_dual[9,C22] - 500*transmissionmin_dual[10,C22] - 500*transmissionmin_dual[11,C22] - 500*transmissionmin_dual[12,C22] - 500*transmissionmin_dual[13,C22] - 500*transmissionmin_dual[14,C22] - 500*transmissionmin_dual[15,C22] - 500*transmissionmin_dual[16,C22] - 500*transmissionmin_dual[17,C22] - 500*transmissionmin_dual[18,C22] - 500*transmissionmin_dual[19,C22] - 500*transmissionmin_dual[20,C22] - 500*transmissionmin_dual[21,C22] - 500*transmissionmin_dual[22,C22] - 500*transmissionmin_dual[23,C22] - 500*transmissionmin_dual[24,C22] - 500*transmissionmin_dual[1,C23] - 500*transmissionmin_dual[2,C23] - 500*transmissionmin_dual[3,C23] - 500*transmissionmin_dual[4,C23] - 500*transmissionmin_dual[5,C23] - 500*transmissionmin_dual[6,C23] - 500*transmissionmin_dual[7,C23] - 500*transmissionmin_dual[8,C23] - 500*transmissionmin_dual[9,C23] - 500*transmissionmin_dual[10,C23] - 500*transmissionmin_dual[11,C23] - 500*transmissionmin_dual[12,C23] - 500*transmissionmin_dual[13,C23] - 500*transmissionmin_dual[14,C23] - 500*transmissionmin_dual[15,C23] - 500*transmissionmin_dual[16,C23] - 500*transmissionmin_dual[17,C23] - 500*transmissionmin_dual[18,C23] - 500*transmissionmin_dual[19,C23] - 500*transmissionmin_dual[20,C23] - 500*transmissionmin_dual[21,C23] - 500*transmissionmin_dual[22,C23] - 500*transmissionmin_dual[23,C23] - 500*transmissionmin_dual[24,C23] - 500*transmissionmin_dual[1,C24] - 500*transmissionmin_dual[2,C24] - 500*transmissionmin_dual[3,C24] - 500*transmissionmin_dual[4,C24] - 500*transmissionmin_dual[5,C24] - 500*transmissionmin_dual[6,C24] - 500*transmissionmin_dual[7,C24] - 500*transmissionmin_dual[8,C24] - 500*transmissionmin_dual[9,C24] - 500*transmissionmin_dual[10,C24] - 500*transmissionmin_dual[11,C24] - 500*transmissionmin_dual[12,C24] - 500*transmissionmin_dual[13,C24] - 500*transmissionmin_dual[14,C24] - 500*transmissionmin_dual[15,C24] - 500*transmissionmin_dual[16,C24] - 500*transmissionmin_dual[17,C24] - 500*transmissionmin_dual[18,C24] - 500*transmissionmin_dual[19,C24] - 500*transmissionmin_dual[20,C24] - 500*transmissionmin_dual[21,C24] - 500*transmissionmin_dual[22,C24] - 500*transmissionmin_dual[23,C24] - 500*transmissionmin_dual[24,C24] - 500*transmissionmin_dual[1,C25-1] - 500*transmissionmin_dual[2,C25-1] - 500*transmissionmin_dual[3,C25-1] - 500*transmissionmin_dual[4,C25-1] - 500*transmissionmin_dual[5,C25-1] - 500*transmissionmin_dual[6,C25-1] - 500*transmissionmin_dual[7,C25-1] - 500*transmissionmin_dual[8,C25-1] - 500*transmissionmin_dual[9,C25-1] - 500*transmissionmin_dual[10,C25-1] - 500*transmissionmin_dual[11,C25-1] - 500*transmissionmin_dual[12,C25-1] - 500*transmissionmin_dual[13,C25-1] - 500*transmissionmin_dual[14,C25-1] - 500*transmissionmin_dual[15,C25-1] - 500*transmissionmin_dual[16,C25-1] - 500*transmissionmin_dual[17,C25-1] - 500*transmissionmin_dual[18,C25-1] - 500*transmissionmin_dual[19,C25-1] - 500*transmissionmin_dual[20,C25-1] - 500*transmissionmin_dual[21,C25-1] - 500*transmissionmin_dual[22,C25-1] - 500*transmissionmin_dual[23,C25-1] - 500*transmissionmin_dual[24,C25-1] - 500*transmissionmin_dual[1,C25-2] - 500*transmissionmin_dual[2,C25-2] - 500*transmissionmin_dual[3,C25-2] - 500*transmissionmin_dual[4,C25-2] - 500*transmissionmin_dual[5,C25-2] - 500*transmissionmin_dual[6,C25-2] - 500*transmissionmin_dual[7,C25-2] - 500*transmissionmin_dual[8,C25-2] - 500*transmissionmin_dual[9,C25-2] - 500*transmissionmin_dual[10,C25-2] - 500*transmissionmin_dual[11,C25-2] - 500*transmissionmin_dual[12,C25-2] - 500*transmissionmin_dual[13,C25-2] - 500*transmissionmin_dual[14,C25-2] - 500*transmissionmin_dual[15,C25-2] - 500*transmissionmin_dual[16,C25-2] - 500*transmissionmin_dual[17,C25-2] - 500*transmissionmin_dual[18,C25-2] - 500*transmissionmin_dual[19,C25-2] - 500*transmissionmin_dual[20,C25-2] - 500*transmissionmin_dual[21,C25-2] - 500*transmissionmin_dual[22,C25-2] - 500*transmissionmin_dual[23,C25-2] - 500*transmissionmin_dual[24,C25-2] - 500*transmissionmin_dual[1,C26] - 500*transmissionmin_dual[2,C26] - 500*transmissionmin_dual[3,C26] - 500*transmissionmin_dual[4,C26] - 500*transmissionmin_dual[5,C26] - 500*transmissionmin_dual[6,C26] - 500*transmissionmin_dual[7,C26] - 500*transmissionmin_dual[8,C26] - 500*transmissionmin_dual[9,C26] - 500*transmissionmin_dual[10,C26] - 500*transmissionmin_dual[11,C26] - 500*transmissionmin_dual[12,C26] - 500*transmissionmin_dual[13,C26] - 500*transmissionmin_dual[14,C26] - 500*transmissionmin_dual[15,C26] - 500*transmissionmin_dual[16,C26] - 500*transmissionmin_dual[17,C26] - 500*transmissionmin_dual[18,C26] - 500*transmissionmin_dual[19,C26] - 500*transmissionmin_dual[20,C26] - 500*transmissionmin_dual[21,C26] - 500*transmissionmin_dual[22,C26] - 500*transmissionmin_dual[23,C26] - 500*transmissionmin_dual[24,C26] - 500*transmissionmin_dual[1,C27] - 500*transmissionmin_dual[2,C27] - 500*transmissionmin_dual[3,C27] - 500*transmissionmin_dual[4,C27] - 500*transmissionmin_dual[5,C27] - 500*transmissionmin_dual[6,C27] - 500*transmissionmin_dual[7,C27] - 500*transmissionmin_dual[8,C27] - 500*transmissionmin_dual[9,C27] - 500*transmissionmin_dual[10,C27] - 500*transmissionmin_dual[11,C27] - 500*transmissionmin_dual[12,C27] - 500*transmissionmin_dual[13,C27] - 500*transmissionmin_dual[14,C27] - 500*transmissionmin_dual[15,C27] - 500*transmissionmin_dual[16,C27] - 500*transmissionmin_dual[17,C27] - 500*transmissionmin_dual[18,C27] - 500*transmissionmin_dual[19,C27] - 500*transmissionmin_dual[20,C27] - 500*transmissionmin_dual[21,C27] - 500*transmissionmin_dual[22,C27] - 500*transmissionmin_dual[23,C27] - 500*transmissionmin_dual[24,C27] - 500*transmissionmin_dual[1,C28] - 500*transmissionmin_dual[2,C28] - 500*transmissionmin_dual[3,C28] - 500*transmissionmin_dual[4,C28] - 500*transmissionmin_dual[5,C28] - 500*transmissionmin_dual[6,C28] - 500*transmissionmin_dual[7,C28] - 500*transmissionmin_dual[8,C28] - 500*transmissionmin_dual[9,C28] - 500*transmissionmin_dual[10,C28] - 500*transmissionmin_dual[11,C28] - 500*transmissionmin_dual[12,C28] - 500*transmissionmin_dual[13,C28] - 500*transmissionmin_dual[14,C28] - 500*transmissionmin_dual[15,C28] - 500*transmissionmin_dual[16,C28] - 500*transmissionmin_dual[17,C28] - 500*transmissionmin_dual[18,C28] - 500*transmissionmin_dual[19,C28] - 500*transmissionmin_dual[20,C28] - 500*transmissionmin_dual[21,C28] - 500*transmissionmin_dual[22,C28] - 500*transmissionmin_dual[23,C28] - 500*transmissionmin_dual[24,C28] - 500*transmissionmin_dual[1,C29] - 500*transmissionmin_dual[2,C29] - 500*transmissionmin_dual[3,C29] - 500*transmissionmin_dual[4,C29] - 500*transmissionmin_dual[5,C29] - 500*transmissionmin_dual[6,C29] - 500*transmissionmin_dual[7,C29] - 500*transmissionmin_dual[8,C29] - 500*transmissionmin_dual[9,C29] - 500*transmissionmin_dual[10,C29] - 500*transmissionmin_dual[11,C29] - 500*transmissionmin_dual[12,C29] - 500*transmissionmin_dual[13,C29] - 500*transmissionmin_dual[14,C29] - 500*transmissionmin_dual[15,C29] - 500*transmissionmin_dual[16,C29] - 500*transmissionmin_dual[17,C29] - 500*transmissionmin_dual[18,C29] - 500*transmissionmin_dual[19,C29] - 500*transmissionmin_dual[20,C29] - 500*transmissionmin_dual[21,C29] - 500*transmissionmin_dual[22,C29] - 500*transmissionmin_dual[23,C29] - 500*transmissionmin_dual[24,C29] - 500*transmissionmin_dual[1,C30] - 500*transmissionmin_dual[2,C30] - 500*transmissionmin_dual[3,C30] - 500*transmissionmin_dual[4,C30] - 500*transmissionmin_dual[5,C30] - 500*transmissionmin_dual[6,C30] - 500*transmissionmin_dual[7,C30] - 500*transmissionmin_dual[8,C30] - 500*transmissionmin_dual[9,C30] - 500*transmissionmin_dual[10,C30] - 500*transmissionmin_dual[11,C30] - 500*transmissionmin_dual[12,C30] - 500*transmissionmin_dual[13,C30] - 500*transmissionmin_dual[14,C30] - 500*transmissionmin_dual[15,C30] - 500*transmissionmin_dual[16,C30] - 500*transmissionmin_dual[17,C30] - 500*transmissionmin_dual[18,C30] - 500*transmissionmin_dual[19,C30] - 500*transmissionmin_dual[20,C30] - 500*transmissionmin_dual[21,C30] - 500*transmissionmin_dual[22,C30] - 500*transmissionmin_dual[23,C30] - 500*transmissionmin_dual[24,C30] - 500*transmissionmin_dual[1,C31-1] - 500*transmissionmin_dual[2,C31-1] - 500*transmissionmin_dual[3,C31-1] - 500*transmissionmin_dual[4,C31-1] - 500*transmissionmin_dual[5,C31-1] - 500*transmissionmin_dual[6,C31-1] - 500*transmissionmin_dual[7,C31-1] - 500*transmissionmin_dual[8,C31-1] - 500*transmissionmin_dual[9,C31-1] - 500*transmissionmin_dual[10,C31-1] - 500*transmissionmin_dual[11,C31-1] - 500*transmissionmin_dual[12,C31-1] - 500*transmissionmin_dual[13,C31-1] - 500*transmissionmin_dual[14,C31-1] - 500*transmissionmin_dual[15,C31-1] - 500*transmissionmin_dual[16,C31-1] - 500*transmissionmin_dual[17,C31-1] - 500*transmissionmin_dual[18,C31-1] - 500*transmissionmin_dual[19,C31-1] - 500*transmissionmin_dual[20,C31-1] - 500*transmissionmin_dual[21,C31-1] - 500*transmissionmin_dual[22,C31-1] - 500*transmissionmin_dual[23,C31-1] - 500*transmissionmin_dual[24,C31-1] - 500*transmissionmin_dual[1,C31-2] - 500*transmissionmin_dual[2,C31-2] - 500*transmissionmin_dual[3,C31-2] - 500*transmissionmin_dual[4,C31-2] - 500*transmissionmin_dual[5,C31-2] - 500*transmissionmin_dual[6,C31-2] - 500*transmissionmin_dual[7,C31-2] - 500*transmissionmin_dual[8,C31-2] - 500*transmissionmin_dual[9,C31-2] - 500*transmissionmin_dual[10,C31-2] - 500*transmissionmin_dual[11,C31-2] - 500*transmissionmin_dual[12,C31-2] - 500*transmissionmin_dual[13,C31-2] - 500*transmissionmin_dual[14,C31-2] - 500*transmissionmin_dual[15,C31-2] - 500*transmissionmin_dual[16,C31-2] - 500*transmissionmin_dual[17,C31-2] - 500*transmissionmin_dual[18,C31-2] - 500*transmissionmin_dual[19,C31-2] - 500*transmissionmin_dual[20,C31-2] - 500*transmissionmin_dual[21,C31-2] - 500*transmissionmin_dual[22,C31-2] - 500*transmissionmin_dual[23,C31-2] - 500*transmissionmin_dual[24,C31-2] - 500*transmissionmin_dual[1,C32-1] - 500*transmissionmin_dual[2,C32-1] - 500*transmissionmin_dual[3,C32-1] - 500*transmissionmin_dual[4,C32-1] - 500*transmissionmin_dual[5,C32-1] - 500*transmissionmin_dual[6,C32-1] - 500*transmissionmin_dual[7,C32-1] - 500*transmissionmin_dual[8,C32-1] - 500*transmissionmin_dual[9,C32-1] - 500*transmissionmin_dual[10,C32-1] - 500*transmissionmin_dual[11,C32-1] - 500*transmissionmin_dual[12,C32-1] - 500*transmissionmin_dual[13,C32-1] - 500*transmissionmin_dual[14,C32-1] - 500*transmissionmin_dual[15,C32-1] - 500*transmissionmin_dual[16,C32-1] - 500*transmissionmin_dual[17,C32-1] - 500*transmissionmin_dual[18,C32-1] - 500*transmissionmin_dual[19,C32-1] - 500*transmissionmin_dual[20,C32-1] - 500*transmissionmin_dual[21,C32-1] - 500*transmissionmin_dual[22,C32-1] - 500*transmissionmin_dual[23,C32-1] - 500*transmissionmin_dual[24,C32-1] - 500*transmissionmin_dual[1,C32-2] - 500*transmissionmin_dual[2,C32-2] - 500*transmissionmin_dual[3,C32-2] - 500*transmissionmin_dual[4,C32-2] - 500*transmissionmin_dual[5,C32-2] - 500*transmissionmin_dual[6,C32-2] - 500*transmissionmin_dual[7,C32-2] - 500*transmissionmin_dual[8,C32-2] - 500*transmissionmin_dual[9,C32-2] - 500*transmissionmin_dual[10,C32-2] - 500*transmissionmin_dual[11,C32-2] - 500*transmissionmin_dual[12,C32-2] - 500*transmissionmin_dual[13,C32-2] - 500*transmissionmin_dual[14,C32-2] - 500*transmissionmin_dual[15,C32-2] - 500*transmissionmin_dual[16,C32-2] - 500*transmissionmin_dual[17,C32-2] - 500*transmissionmin_dual[18,C32-2] - 500*transmissionmin_dual[19,C32-2] - 500*transmissionmin_dual[20,C32-2] - 500*transmissionmin_dual[21,C32-2] - 500*transmissionmin_dual[22,C32-2] - 500*transmissionmin_dual[23,C32-2] - 500*transmissionmin_dual[24,C32-2] - 500*transmissionmin_dual[1,C33-1] - 500*transmissionmin_dual[2,C33-1] - 500*transmissionmin_dual[3,C33-1] - 500*transmissionmin_dual[4,C33-1] - 500*transmissionmin_dual[5,C33-1] - 500*transmissionmin_dual[6,C33-1] - 500*transmissionmin_dual[7,C33-1] - 500*transmissionmin_dual[8,C33-1] - 500*transmissionmin_dual[9,C33-1] - 500*transmissionmin_dual[10,C33-1] - 500*transmissionmin_dual[11,C33-1] - 500*transmissionmin_dual[12,C33-1] - 500*transmissionmin_dual[13,C33-1] - 500*transmissionmin_dual[14,C33-1] - 500*transmissionmin_dual[15,C33-1] - 500*transmissionmin_dual[16,C33-1] - 500*transmissionmin_dual[17,C33-1] - 500*transmissionmin_dual[18,C33-1] - 500*transmissionmin_dual[19,C33-1] - 500*transmissionmin_dual[20,C33-1] - 500*transmissionmin_dual[21,C33-1] - 500*transmissionmin_dual[22,C33-1] - 500*transmissionmin_dual[23,C33-1] - 500*transmissionmin_dual[24,C33-1] - 500*transmissionmin_dual[1,C33-2] - 500*transmissionmin_dual[2,C33-2] - 500*transmissionmin_dual[3,C33-2] - 500*transmissionmin_dual[4,C33-2] - 500*transmissionmin_dual[5,C33-2] - 500*transmissionmin_dual[6,C33-2] - 500*transmissionmin_dual[7,C33-2] - 500*transmissionmin_dual[8,C33-2] - 500*transmissionmin_dual[9,C33-2] - 500*transmissionmin_dual[10,C33-2] - 500*transmissionmin_dual[11,C33-2] - 500*transmissionmin_dual[12,C33-2] - 500*transmissionmin_dual[13,C33-2] - 500*transmissionmin_dual[14,C33-2] - 500*transmissionmin_dual[15,C33-2] - 500*transmissionmin_dual[16,C33-2] - 500*transmissionmin_dual[17,C33-2] - 500*transmissionmin_dual[18,C33-2] - 500*transmissionmin_dual[19,C33-2] - 500*transmissionmin_dual[20,C33-2] - 500*transmissionmin_dual[21,C33-2] - 500*transmissionmin_dual[22,C33-2] - 500*transmissionmin_dual[23,C33-2] - 500*transmissionmin_dual[24,C33-2] - 500*transmissionmin_dual[1,C34] - 500*transmissionmin_dual[2,C34] - 500*transmissionmin_dual[3,C34] - 500*transmissionmin_dual[4,C34] - 500*transmissionmin_dual[5,C34] - 500*transmissionmin_dual[6,C34] - 500*transmissionmin_dual[7,C34] - 500*transmissionmin_dual[8,C34] - 500*transmissionmin_dual[9,C34] - 500*transmissionmin_dual[10,C34] - 500*transmissionmin_dual[11,C34] - 500*transmissionmin_dual[12,C34] - 500*transmissionmin_dual[13,C34] - 500*transmissionmin_dual[14,C34] - 500*transmissionmin_dual[15,C34] - 500*transmissionmin_dual[16,C34] - 500*transmissionmin_dual[17,C34] - 500*transmissionmin_dual[18,C34] - 500*transmissionmin_dual[19,C34] - 500*transmissionmin_dual[20,C34] - 500*transmissionmin_dual[21,C34] - 500*transmissionmin_dual[22,C34] - 500*transmissionmin_dual[23,C34] - 500*transmissionmin_dual[24,C34] - 722*transmissionmin_dual[1,C35] - 722*transmissionmin_dual[2,C35] - 722*transmissionmin_dual[3,C35] - 722*transmissionmin_dual[4,C35] - 722*transmissionmin_dual[5,C35] - 722*transmissionmin_dual[6,C35] - 722*transmissionmin_dual[7,C35] - 722*transmissionmin_dual[8,C35] - 722*transmissionmin_dual[9,C35] - 722*transmissionmin_dual[10,C35] - 722*transmissionmin_dual[11,C35] - 722*transmissionmin_dual[12,C35] - 722*transmissionmin_dual[13,C35] - 722*transmissionmin_dual[14,C35] - 722*transmissionmin_dual[15,C35] - 722*transmissionmin_dual[16,C35] - 722*transmissionmin_dual[17,C35] - 722*transmissionmin_dual[18,C35] - 722*transmissionmin_dual[19,C35] - 722*transmissionmin_dual[20,C35] - 722*transmissionmin_dual[21,C35] - 722*transmissionmin_dual[22,C35] - 722*transmissionmin_dual[23,C35] - 722*transmissionmin_dual[24,C35]
...instance created.
Creating Offer Mitigation (model will solve as dispatch if TRUE)...
...storage offer mitigation file created
Converting model to MPEC...
...converted
NOTE: initial MIP solve with only storage competitive to get feasible solution
Solving...

Welcome to IBM(R) ILOG(R) CPLEX(R) Interactive Optimizer 12.9.0.0
  with Simplex, Mixed Integer & Barrier Optimizers
5725-A06 5725-A29 5724-Y48 5724-Y49 5724-Y54 5724-Y55 5655-Y21
Copyright IBM Corp. 1988, 2019.  All Rights Reserved.

Type 'help' for a list of available commands.
Type 'help' followed by a command name for more
information on commands.

CPLEX> Logfile 'cplex.log' closed.
Logfile 'C:\Users\llavin\Desktop\test826\logs\tmpw5ob7zc6.cplex.log' open.
CPLEX> New value for parallel optimization mode: -1
CPLEX> New value for emphasis for MIP optimization: 1
CPLEX> New value for mixed integer optimality gap tolerance: 0.01
CPLEX> New value for integrality tolerance: 1e-12
CPLEX> New value for deterministic time limit in ticks: 75000
CPLEX> Problem 'C:\Users\llavin\Desktop\test826\logs\tmpzdw6gs19.pyomo.lp' read.
Read time = 0.25 sec. (14.73 ticks)
CPLEX> Problem name         : C:\Users\llavin\Desktop\test826\logs\tmpzdw6gs19.pyomo.lp
Objective sense      : Maximize
Variables            :   53805  [Nneg: 1,  Box: 22000,  Free: 4464,
                                 Binary: 27340]
Objective nonzeros   :    9089
Linear constraints   :  123205  [Less: 41346,  Greater: 59096,  Equal: 22763]
  Nonzeros           :  291716
  RHS nonzeros       :   67502

Variables            : Min LB: -5000.000        Max UB: 1000000.       
Objective nonzeros   : Min   : 0.0001000000     Max   : 828.6917       
Linear constraints   :
  Nonzeros           : Min   : 0.0001000000     Max   : 1000000.       
  RHS nonzeros       : Min   : 0.0001000000     Max   : 1000000.       
CPLEX> CPXPARAM_Parallel                                -1
CPXPARAM_Emphasis_MIP                            1
CPXPARAM_DetTimeLimit                            75000
CPXPARAM_MIP_Tolerances_MIPGap                   0.01
CPXPARAM_MIP_Tolerances_Integrality              9.9999999999999998e-13
Tried aggregator 3 times.
MIP Presolve eliminated 88646 rows and 19002 columns.
MIP Presolve added 3358 rows and 0 columns.
MIP Presolve modified 24780 coefficients.
Aggregator did 12956 substitutions.
Reduced MIP has 24961 rows, 21299 columns, and 71119 nonzeros.
Reduced MIP has 8429 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.28 sec. (167.93 ticks)
Probing fixed 430 vars, tightened 6204 bounds.
Probing time = 0.08 sec. (19.47 ticks)
Tried aggregator 2 times.
MIP Presolve eliminated 954 rows and 860 columns.
MIP Presolve modified 3131 coefficients.
Aggregator did 47 substitutions.
Reduced MIP has 23960 rows, 20392 columns, and 68210 nonzeros.
Reduced MIP has 7999 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.11 sec. (87.69 ticks)
Probing fixed 0 vars, tightened 306 bounds.
Probing time = 0.14 sec. (22.90 ticks)
Clique table members: 41441.
MIP emphasis: integer feasibility.
MIP search method: dynamic search.
Parallel mode: opportunistic, using up to 32 threads.
Root relaxation solution time = 0.38 sec. (515.80 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0      -23.4052    61                    -23.4052     4355         
      0     0      -23.4052     5                     Cuts: 7     4358         
      0     0      -23.4052     4                   Covers: 1     4359         
      0     0      -23.4052     3                   Covers: 1     4360         
      0     4    infeasible                          -36.8951     4372         
Elapsed time = 2.99 sec. (1550.72 ticks, tree = 0.02 MB, solutions = 0)
    609   156  -445203.4504    23                   -174.3200     9669         
   1091   156  -308436.2409    22                   -174.3200    33524         
   1650    19    infeasible                         -174.3200    43596         
   2364    59  -123734.4719    21                   -174.3200    46819         
   2998   529 -6731260.7255    54                   -174.3200    54516         
   3662  1010    -1809.9743    12                   -174.3200    64347         
   4355   983  -255054.2885    35                   -174.3200    64548         
   5033  1716  -347935.2217    25                   -174.3200    89817         
   5654  1219    -1398.2248    15                   -174.3200    73198         
   8474  1775    -2802.0003    11                   -174.3200    92061         
Elapsed time = 25.56 sec. (4654.35 ticks, tree = 163.34 MB, solutions = 0)
  11025  2998    infeasible                         -174.3200   122840         
  13119  3519    -1846.5542    13                   -174.3200   133774         
  14547  4141    infeasible                         -174.3200   150551         
  15232  4089    -3180.0742    17                   -174.3200   148923         
  15447  3815     -174.3200     4                   -174.3200   143654         
  15450  7861    infeasible                         -174.3200   267902         
  17168   742    infeasible                         -175.2180   313303         
  19596  1474    infeasible                         -175.2180   350875         
  22276  1964     -207.4672     1                   -175.2180   372587         
  25171  3531     -222.5876     1                   -175.2180   421687         
Elapsed time = 64.84 sec. (16017.88 ticks, tree = 118.33 MB, solutions = 0)
  28410  3432    infeasible                         -175.2180   417102         
  31643  4166     -652.6734     3                   -175.2180   454404         
  34738  5285    infeasible                         -175.2180   494924         
  37982  5886    -2720.5547    13                   -175.2180   513096         
  41185  6769     -885.8721     7                   -175.2180   543031         
  44371  6872     -299.1812     1                   -175.2180   548251         
  47591  7293    -2780.2982    11                   -175.2180   565441         
  50699  9689    -1317.1878     6                   -175.2180   648828         
  53738 12196    infeasible                         -175.2180   745431         
  57065 11124    infeasible                         -175.5173   703792         
Elapsed time = 137.99 sec. (25557.89 ticks, tree = 181.64 MB, solutions = 0)
  60333 11720    -2363.5022    14                   -175.5173   731075         
  63729 14960     -876.9472     8                   -175.5173   842383         
  67088 14128    -1022.8826     4                   -175.5173   808579         
  70543 13846    infeasible                         -175.5173   798608         
  74210 15571    -4332.1945    12                   -175.5173   865545         
  77843 14917    infeasible                         -175.5173   839833         
  81277 15738     -652.6691     2                   -175.5173   872764         
  85081 17670     -264.7877     1                   -175.5173   952171         
  88970 17135     -833.6618     4                   -175.5173   923891         
  92725 19940     -676.7483     3                   -175.5173  1056779         
Elapsed time = 172.33 sec. (35095.84 ticks, tree = 221.07 MB, solutions = 0)
  96643 21166     -675.4593     3                   -175.5173  1110095         
 100331 21209    -1001.5918     6                   -175.5173  1107936         
 103432 27250    infeasible                         -175.5173  1333231         
 106568 28800    -1365.7911    14                   -175.5173  1372561         
 110241 28863    infeasible                         -175.5173  1373613         
 113573 26189     -398.5716     4                   -175.5173  1292526         
 116230 27300    -5116.0179    15                   -175.5173  1337751         
 118150 27345    -1647.2304     5                   -175.5173  1338605         
 119559 28705     -333.4412     3                   -175.5173  1372884         
 120502 27978    -5199.8853    20                   -175.5173  1352204         
Elapsed time = 186.41 sec. (44635.86 ticks, tree = 263.17 MB, solutions = 0)
 121094 29130    infeasible                         -175.5173  1391543         
 121219 33487    infeasible                         -175.5173  1611263         
*121396    51      integral     0     -400.0964     -185.1444  1617911   53.73%
 122668    38     -230.4453     1     -400.0964     -192.8879  1630367   51.79%

Cover cuts applied:  17
Implied bound cuts applied:  4
Flow cuts applied:  14
Mixed integer rounding cuts applied:  8

Root node processing (before b&c):
  Real time             =    2.27 sec. (1547.12 ticks)
Parallel b&c, 32 threads:
  Real time             =  193.55 sec. (47405.18 ticks)
  Sync time (average)   =    3.89 sec.
  Wait time (average)   =    0.47 sec.
                          ------------
Total (root+branch&cut) =  195.81 sec. (48952.30 ticks)

Solution pool: 2 solutions saved.

MIP - Integer optimal solution:  Objective = -4.0009643844e+02
Solution time =  195.83 sec.  Iterations = 1630626  Nodes = 122718
Deterministic time = 48952.45 ticks  (249.98 ticks/sec)

CPLEX> Incumbent solution written to file 'C:\Users\llavin\Desktop\test826\logs\tmpia199r92.cplex.sol'.
CPLEX> NOTE: no warmstart specified for MIP iteration, default behavior is true
NOTE: resolving with all competitive generators using storage-only solution to warmstart
Solving...

Welcome to IBM(R) ILOG(R) CPLEX(R) Interactive Optimizer 12.9.0.0
  with Simplex, Mixed Integer & Barrier Optimizers
5725-A06 5725-A29 5724-Y48 5724-Y49 5724-Y54 5724-Y55 5655-Y21
Copyright IBM Corp. 1988, 2019.  All Rights Reserved.

Type 'help' for a list of available commands.
Type 'help' followed by a command name for more
information on commands.

CPLEX> Logfile 'cplex.log' closed.
Logfile 'C:\Users\llavin\Desktop\test826\logs\tmp3qp501cb.cplex.log' open.
CPLEX> New value for parallel optimization mode: -1
CPLEX> New value for emphasis for MIP optimization: 1
CPLEX> New value for mixed integer optimality gap tolerance: 0.01
CPLEX> New value for integrality tolerance: 1e-12
CPLEX> New value for deterministic time limit in ticks: 75000
CPLEX> Problem 'C:\Users\llavin\Desktop\test826\logs\tmpluopt8gj.pyomo.lp' read.
Read time = 0.25 sec. (14.75 ticks)
CPLEX> MIP start file 'C:\Users\llavin\Desktop\test826\logs\tmpvoid4b5j.cplex.mst' read.
CPLEX> Problem name         : C:\Users\llavin\Desktop\test826\logs\tmpluopt8gj.pyomo.lp
Objective sense      : Maximize
Variables            :   54525  [Nneg: 1,  Box: 22720,  Free: 4464,
                                 Binary: 27340]
Objective nonzeros   :    9809
Linear constraints   :  123205  [Less: 41346,  Greater: 59096,  Equal: 22763]
  Nonzeros           :  291716
  RHS nonzeros       :   67502

Variables            : Min LB: -5000.000        Max UB: 1000000.       
Objective nonzeros   : Min   : 0.0001000000     Max   : 828.6917       
Linear constraints   :
  Nonzeros           : Min   : 0.0001000000     Max   : 1000000.       
  RHS nonzeros       : Min   : 0.0001000000     Max   : 1000000.       
CPLEX> CPXPARAM_Parallel                                -1
CPXPARAM_Emphasis_MIP                            1
CPXPARAM_DetTimeLimit                            75000
CPXPARAM_MIP_Tolerances_MIPGap                   0.01
CPXPARAM_MIP_Tolerances_Integrality              9.9999999999999998e-13
Warning:  No solution found from 1 MIP starts.
Retaining values of one MIP start for possible repair.
Tried aggregator 3 times.
MIP Presolve eliminated 88646 rows and 19722 columns.
MIP Presolve added 3358 rows and 0 columns.
MIP Presolve modified 24780 coefficients.
Aggregator did 12956 substitutions.
Reduced MIP has 24961 rows, 21299 columns, and 71119 nonzeros.
Reduced MIP has 8429 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.28 sec. (168.28 ticks)
Probing fixed 430 vars, tightened 6204 bounds.
Probing time = 0.06 sec. (19.47 ticks)
Tried aggregator 2 times.
MIP Presolve eliminated 954 rows and 860 columns.
MIP Presolve modified 3131 coefficients.
Aggregator did 47 substitutions.
Reduced MIP has 23960 rows, 20392 columns, and 68210 nonzeros.
Reduced MIP has 7999 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.11 sec. (87.69 ticks)
Probing fixed 0 vars, tightened 306 bounds.
Probing time = 0.13 sec. (22.90 ticks)
Clique table members: 41441.
MIP emphasis: integer feasibility.
MIP search method: dynamic search.
Parallel mode: opportunistic, using up to 32 threads.
Root relaxation solution time = 0.38 sec. (515.80 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0      -23.4052    61                    -23.4052     4355         
      0     0      -23.4052     5                     Cuts: 7     4358         
      0     0      -23.4052     4                   Covers: 1     4359         
      0     0      -23.4052     3                   Covers: 1     4360         
Repair heuristic found nothing.
      0     4    infeasible                          -36.8951     4372         
Elapsed time = 3.16 sec. (1596.62 ticks, tree = 0.02 MB, solutions = 0)
    494    99   -69704.6234    13                   -174.3200    14506         
    995   164  -848677.8334    30                   -174.3200    28781         
   1592   322    -6805.9336     6                   -174.3200    49208         
   2147   333    infeasible                         -174.3200    49756         
   2684   602  -870759.0684    46                   -174.3200    63162         
   3324   704   -50558.4074    25                   -174.3200    65188         
   3872   933    -1492.8763    11                   -174.3200    75255         
   4372  1420    -1291.2909    13                   -174.3200   104772         
   4826  1433    -1682.2320    10                   -174.3200   104865         
   7324  2297   -23605.0688    67                   -174.3200   161816         
Elapsed time = 21.42 sec. (4697.71 ticks, tree = 26.26 MB, solutions = 0)
  10163  2477    -1714.7845    16                   -174.3200   172846         
  12265  3292    infeasible                         -174.3200   213699         
  13428  3288    infeasible                         -174.3200   214522         
  13965  3323  -122250.3878    35                   -174.3200   211369         
  14231  3079     -174.3200     3                   -174.3200   202375         
  14232  5774    infeasible                         -174.3200   369749         
* 14263+   42                         -194.4596     -174.3200            10.36%

Cover cuts applied:  15
Flow cuts applied:  10

Root node processing (before b&c):
  Real time             =    2.47 sec. (1592.71 ticks)
Parallel b&c, 32 threads:
  Real time             =   32.80 sec. (9651.31 ticks)
  Sync time (average)   =    1.77 sec.
  Wait time (average)   =    0.22 sec.
                          ------------
Total (root+branch&cut) =   35.27 sec. (11244.02 ticks)

Solution pool: 2 solutions saved.

MIP - Integer optimal solution:  Objective = -1.9445957186e+02
Solution time =   35.30 sec.  Iterations = 374905  Nodes = 14466
Deterministic time = 11244.18 ticks  (318.56 ticks/sec)

CPLEX> Incumbent solution written to file 'C:\Users\llavin\Desktop\test826\logs\tmpu3i9tjb8.cplex.sol'.
CPLEX> Exporting results... 
